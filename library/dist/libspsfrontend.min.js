(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["libspsfrontend"] = factory();
	else
		root["libspsfrontend"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Afk/AfkLogic.ts":
/*!*****************************!*\
  !*** ./src/Afk/AfkLogic.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ AfkLogic)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");


var AfkLogic = /** @class */ (function () {
    function AfkLogic(controlScheme, afkTimeout) {
        this.warnTimeout = 0;
        this.closeTimeout = 10;
        this.active = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.warnTimeout = afkTimeout;
        this.controlScheme = controlScheme;
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    AfkLogic.prototype.onAfkClick = function () {
        this.hideCurrentOverlay();
        clearInterval(this.countDownTimer);
        this.startAfkWarningTimer();
    };
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    AfkLogic.prototype.startAfkWarningTimer = function () {
        if (this.warnTimeout > 0) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    };
    /**
     * Stop the afk warning timer
     */
    AfkLogic.prototype.stopAfkWarningTimer = function () {
        this.active = false;
        clearInterval(this.warnTimer);
        clearInterval(this.countDownTimer);
    };
    /**
     * Pause the timer which when elapsed will warn the user they are inactive.
     */
    AfkLogic.prototype.pauseAfkWarningTimer = function () {
        this.active = false;
    };
    /**
     * If the user interacts then reset the warning timer.
     */
    AfkLogic.prototype.resetAfkWarningTimer = function () {
        var _this = this;
        if (this.active) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(function () { return _this.activateAfkEvent(); }, this.warnTimeout * 1000);
        }
    };
    /**
     * Show the AFK overlay and begin the countDown
     */
    AfkLogic.prototype.activateAfkEvent = function () {
        var _this = this;
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.pauseAfkWarningTimer();
        // instantiate a new overlay 
        this.showAfkOverlay();
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.updateAfkCountdown();
        // if we are in locked mouse exit pointerlock 
        if (this.controlScheme == _Config_Config__WEBPACK_IMPORTED_MODULE_0__.ControlSchemeType.LockedMouse) {
            // minor hack to alleviate ios not supporting pointerlock
            if (document.exitPointerLock) {
                document.exitPointerLock();
            }
        }
        // reset our countDown interval accordingly 
        this.countDownTimer = setInterval(function () {
            _this.countDown--;
            if (_this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                _this.hideCurrentOverlay();
                _this.setDisconnectMessageOverride("You have been disconnected due to inactivity");
                _this.closeWebSocket();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "You have been disconnected due to inactivity");
                // switch off the afk feature as stream has closed 
                _this.stopAfkWarningTimer();
            }
            else {
                // Update the countDown message.
                _this.updateAfkCountdown();
            }
        }, 1000);
    };
    /**
     * An override method for updating the afk countdown number in the overlay
     */
    AfkLogic.prototype.updateAfkCountdown = function () { };
    /**
     * An override method for showing the afk overlay
     */
    AfkLogic.prototype.showAfkOverlay = function () { };
    /**
     * An override method for hiding the afk overlay
     */
    AfkLogic.prototype.hideCurrentOverlay = function () { };
    /**
     * An  override method for setting the override for the disconnect message
     */
    AfkLogic.prototype.setDisconnectMessageOverride = function (message) { };
    /**
     * An override method for closing the websocket connection from the clients side
     */
    AfkLogic.prototype.closeWebSocket = function () { };
    return AfkLogic;
}());



/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType)
/* harmony export */ });
var Config = /** @class */ (function () {
    /**
     * @param signallingServerAddress - the address of the signaling server
     * @param playerElement - the player element ID
     */
    function Config(signallingServerAddress, playerElement) {
        // PRESET OPTIONS
        // enable the auto connect of the websocket 
        this.enableSpsAutoConnect = false;
        // enable the autoplay of the video if enabled by browser
        this.enableSpsAutoplay = false;
        // start the video muted
        this.startVideoMuted = false;
        // set the amount of wait time in seconds while there is inactivity for afk to occur 
        this.afkTimeout = 120;
        // The control scheme controls the behaviour of the mouse when it interacts with the WebRTC player.
        this.controlScheme = ControlSchemeType.LockedMouse;
        // Browser keys are those which are typically used by the browser UI. We usually want to suppress these to allow, for example, UE4 to show shader complexity with the F5 key without the web page refreshing.
        this.suppressBrowserKeys = true;
        // UE4 has a fake touches option which fakes a single finger touch when the user drags with their mouse. 
        // We may perform the reverse; a single finger touch may be converted into a mouse drag UE4 side. This allows a non-touch application to be controlled partially via a touch device.
        this.fakeMouseWithTouches = false;
        this.signallingServerAddress = signallingServerAddress;
        this.playerElement = playerElement;
    }
    return Config;
}());

/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataChannelReceiveMessageType */ "./src/DataChannel/DataChannelReceiveMessageType.ts");
/* harmony import */ var _InitialSettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");




/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
var DataChannelController = /** @class */ (function () {
    function DataChannelController() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    DataChannelController.prototype.createDataChannel = function (peerConnection, label, datachannelOptions) {
        var _this = this;
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = function () { return _this.handleOnOpen(); };
        this.dataChannel.onclose = function () { return _this.handleOnClose(); };
        this.dataChannel.onmessage = function (ev) { return _this.handleOnMessage(ev); };
    };
    /**
     * Handles when the Data Channel is opened
     */
    DataChannelController.prototype.handleOnOpen = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel: " + this.label + " is opened.", 7);
    };
    /**
     * Handles when the Data Channel is closed
     */
    DataChannelController.prototype.handleOnClose = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel: " + this.label + " is closed.", 7);
    };
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    DataChannelController.prototype.handleOnMessage = function (event) {
        var message = new Uint8Array(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message incoming", 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message:" + message, 6);
        switch (message[0]) {
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.QualityControlOwnership: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.QualityControlOwnership", 6);
                var QualityOwnership = new Boolean(message[1]).valueOf();
                this.onQualityControlOwnership(QualityOwnership);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Response: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Response", 6);
                this.onResponse(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Command: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Command", 6);
                this.onCommand(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.FreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.FreezeFrame", 6);
                this.processFreezeFrameMessage(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.UnfreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.FreezeFrame", 6);
                this.isReceivingFreezeFrame = false;
                this.onUnFreezeFrame();
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.VideoEncoderAvgQP: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.VideoEncoderAvgQP", 6);
                var AvgQP = Number(new TextDecoder("utf-16").decode(message.slice(1)));
                this.onVideoEncoderAvgQP(AvgQP);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.latencyTest: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.latencyTest", 6);
                var latencyAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iLatencyTestResults = JSON.parse(latencyAsString);
                var latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__.LatencyTestResults();
                Object.assign(latencyTestResults, iLatencyTestResults);
                latencyTestResults.processFields();
                this.onLatencyTestResult(latencyTestResults);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.InitialSettings: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.InitialSettings", 6);
                var payloadAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iInitialSettings = JSON.parse(payloadAsString);
                var initialSettings = new _InitialSettings__WEBPACK_IMPORTED_MODULE_2__.InitialSettings();
                Object.assign(initialSettings, iInitialSettings);
                initialSettings.ueCompatible();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), payloadAsString, 6);
                this.OnInitialSettings(initialSettings);
                break;
            }
            default: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), message[0].toString());
                var decoded = new TextDecoder("utf-16").decode(message.slice(1));
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), decoded);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "unknown message sent on the Data channel");
                break;
            }
        }
    };
    /**
     * Fired when a Response message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onResponse = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Response", 6);
        var responses = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), responses, 6);
        //add to response handlers 
    };
    /**
     * Fired when a Command message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onCommand = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Command", 6);
        var commandAsString = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel Command: " + commandAsString, 6);
        var command = JSON.parse(commandAsString);
        if (command.command === "onScreenKeyboard") {
            //show on screen Keyboard;
        }
    };
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    DataChannelController.prototype.sendData = function (data) {
        // reset the afk inactivity
        this.resetAfkWarningTimerOnDataSend();
        if (this.dataChannel && this.dataChannel.readyState == "open") {
            this.dataChannel.send(data);
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message Failed: " + new Uint8Array(data));
        }
    };
    /**
     * Fired when the UE Instance updates who has Quality Ownership
     * @param hasQualityOwnership - Does the client have Quality Ownership
     */
    DataChannelController.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    /**
     * Fired when the UE Instance sends freeze frame data
     * @param message - Freeze Frame Data
     */
    DataChannelController.prototype.processFreezeFrameMessage = function (message) { };
    /**
     * Fired when the UE Instance sends a un Freeze Frame
     */
    DataChannelController.prototype.onUnFreezeFrame = function () { };
    /**
     * Fired when the UE Instance sends the Video Encoder Avg QP
     * @param AvgQP - Avg QP
     */
    DataChannelController.prototype.onVideoEncoderAvgQP = function (AvgQP) { };
    /**
     * Fired when the UE Instance sends Latency test Results
     * @param latencyTestResults - Latency Test Results
     */
    DataChannelController.prototype.onLatencyTestResult = function (latencyTestResults) { };
    /**
     * Fired when the UE Instance sends Initial Settings
     * @param InitialSettings - Initial Settings
     */
    DataChannelController.prototype.OnInitialSettings = function (InitialSettings) { };
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    DataChannelController.prototype.resetAfkWarningTimerOnDataSend = function () { };
    return DataChannelController;
}());



/***/ }),

/***/ "./src/DataChannel/DataChannelReceiveMessageType.ts":
/*!**********************************************************!*\
  !*** ./src/DataChannel/DataChannelReceiveMessageType.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataChannelReceiveMessageType": () => (/* binding */ DataChannelReceiveMessageType)
/* harmony export */ });
/**
 * Data Channel Receives Message Type
 */
var DataChannelReceiveMessageType;
(function (DataChannelReceiveMessageType) {
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["QualityControlOwnership"] = 0] = "QualityControlOwnership";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Response"] = 1] = "Response";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Command"] = 2] = "Command";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["FreezeFrame"] = 3] = "FreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["UnfreezeFrame"] = 4] = "UnfreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["VideoEncoderAvgQP"] = 5] = "VideoEncoderAvgQP";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["latencyTest"] = 6] = "latencyTest";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["InitialSettings"] = 7] = "InitialSettings";
})(DataChannelReceiveMessageType || (DataChannelReceiveMessageType = {}));


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Encoder": () => (/* binding */ Encoder),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming),
/* harmony export */   "WebRTC": () => (/* binding */ WebRTC)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var InitialSettings = /** @class */ (function () {
    function InitialSettings() {
        this.PixelStreaming = new PixelStreaming();
        this.Encoder = new Encoder();
        this.WebRTC = new WebRTC();
    }
    InitialSettings.prototype.ueCompatible = function () {
        if (this.WebRTC.MaxFPS != null) {
            this.WebRTC.FPS = this.WebRTC.MaxFPS;
        }
    };
    return InitialSettings;
}());

var PixelStreaming = /** @class */ (function () {
    function PixelStreaming() {
    }
    return PixelStreaming;
}());

var Encoder = /** @class */ (function () {
    function Encoder() {
    }
    return Encoder;
}());

var WebRTC = /** @class */ (function () {
    function WebRTC() {
    }
    return WebRTC;
}());



/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Latency Test Results Data
 */
var LatencyTestResults = /** @class */ (function () {
    function LatencyTestResults() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    LatencyTestResults.prototype.setFrameDisplayDeltaTime = function (DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    };
    LatencyTestResults.prototype.processFields = function () {
        if (this.EncodeMs == null && (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Setting Encode Ms \n " + this.PostEncodeTimeMs + " \n " + this.PreEncodeTimeMs, 6);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null && (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Setting CaptureToSendMs Ms \n " + this.PostCaptureTimeMs + " \n " + this.PreCaptureTimeMs, 6);
            this.CaptureToSendMs = this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    };
    return LatencyTestResults;
}());



/***/ }),

/***/ "./src/Delegate/DelegateBase.ts":
/*!**************************************!*\
  !*** ./src/Delegate/DelegateBase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DelegateBase": () => (/* binding */ DelegateBase)
/* harmony export */ });
/**
 * Provides common base functionality for delegates that implement the IDelegate interface
*/
var DelegateBase = /** @class */ (function () {
    /**
     * @param config - A newly instantiated config object
     * returns the base delegate object with the config inside it along with a new instance of the Overlay controller class
     */
    function DelegateBase(config) {
        this.showActionOrErrorOnDisconnect = true;
        this.config = config;
    }
    /**
     * Shows the disconnect overlay
     */
    DelegateBase.prototype.showDisconnectOverlay = function (updateText) {
        this.hideCurrentOverlay();
        this.updateDisconnectOverlay(updateText);
        this.disconnectOverlay.show();
        this.currentOverlay = this.disconnectOverlay;
    };
    /**
     * Update the disconnect overlays span text
     * @param updateText the new countdown number
     */
    DelegateBase.prototype.updateDisconnectOverlay = function (updateText) {
        this.disconnectOverlay.update(updateText);
    };
    /**
     * Activates the disconnect overlays action
     */
    DelegateBase.prototype.onDisconnectionAction = function () {
        this.disconnectOverlay.activate();
    };
    /**
     * Hides the current overlay
     */
    DelegateBase.prototype.hideCurrentOverlay = function () {
        if (this.currentOverlay != null) {
            this.currentOverlay.hide();
            this.currentOverlay = null;
        }
    };
    /**
     * Shows the connect overlay
     */
    DelegateBase.prototype.showConnectOverlay = function () {
        this.hideCurrentOverlay();
        this.connectOverlay.show();
        this.currentOverlay = this.connectOverlay;
    };
    /**
     * Shows the play overlay
     */
    DelegateBase.prototype.showPlayOverlay = function () {
        this.hideCurrentOverlay();
        this.playOverlay.show();
        this.currentOverlay = this.playOverlay;
    };
    /**
     * Shows the text overlay
     */
    DelegateBase.prototype.showTextOverlay = function (text) {
        this.hideCurrentOverlay();
        this.infoOverlay.update(text);
        this.infoOverlay.show();
        this.currentOverlay = this.infoOverlay;
    };
    /**
     * Shows the error overlay
     */
    DelegateBase.prototype.showErrorOverlay = function (text) {
        this.hideCurrentOverlay();
        this.errorOverlay.update(text);
        this.errorOverlay.show();
        this.currentOverlay = this.errorOverlay;
    };
    /**
     * Activates the connect overlays action
     */
    DelegateBase.prototype.onConnectAction = function () {
        this.connectOverlay.activate();
    };
    /**
     * Activates the play overlays action
     */
    DelegateBase.prototype.onPlayAction = function () {
        this.playOverlay.activate();
    };
    /**
     * Shows the afk overlay
     * @param countDown the countdown number for the afk countdown
     */
    DelegateBase.prototype.showAfkOverlay = function (countDown) {
        this.hideCurrentOverlay();
        this.updateAfkOverlay(countDown);
        this.afkOverlay.show();
        this.currentOverlay = this.afkOverlay;
    };
    /**
     * Update the afk overlays countdown number
     * @param countDown the new countdown number
     */
    DelegateBase.prototype.updateAfkOverlay = function (countDown) {
        this.afkOverlay.updateCountdown(countDown);
    };
    /**
     * Activates the afk overlays action
     */
    DelegateBase.prototype.onAfkAction = function () {
        this.afkOverlay.activate();
    };
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param iWebRtcPlayerController
     */
    DelegateBase.prototype.setIWebRtcPlayerController = function (iWebRtcPlayerController) {
        var _this = this;
        this.iWebRtcController = iWebRtcPlayerController;
        this.iWebRtcController.resizePlayerStyle();
        this.disconnectOverlay.onAction(function () {
            _this.onWebRtcAutoConnect();
            _this.iWebRtcController.connectToSignallingServer();
        });
        // Build the webRtc connect overlay Event Listener and show the connect overlay
        this.connectOverlay.onAction(function () { return _this.iWebRtcController.connectToSignallingServer(); });
        // set up the afk overlays action 
        this.afkOverlay.onAction(function () { return _this.iWebRtcController.onAfkClick(); });
        // set up the play overlays action 
        this.playOverlay.onAction(function () {
            _this.onStreamLoading();
            _this.iWebRtcController.playStream();
        });
        // set up the connect overlays action
        this.showConnectOrAutoConnectOverlays();
    };
    /**
     * Show the Connect Overlay or auto connect
     */
    DelegateBase.prototype.showConnectOrAutoConnectOverlays = function () {
        // set up if the auto play will be used or regular click to start
        if (!this.config.enableSpsAutoConnect) {
            this.showConnectOverlay();
        }
        else {
            // if autoplaying show an info overlay while while waiting for the connection to begin 
            this.onWebRtcAutoConnect();
            this.iWebRtcController.connectToSignallingServer();
        }
    };
    /**
     * Show the webRtcAutoConnect Overlay and connect
     */
    DelegateBase.prototype.onWebRtcAutoConnect = function () {
        this.showTextOverlay("Auto Connecting Now");
        this.showActionOrErrorOnDisconnect = true;
    };
    /**
     * Set up functionality to happen when an instance state change occurs
     * @param instanceState - the message instance state
     */
    DelegateBase.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Set up functionality to happen when receiving an auth response
     * @param authResponse - the auth response message type
     */
    DelegateBase.prototype.onAuthenticationResponse = function (authResponse) { };
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    DelegateBase.prototype.onWebRtcAnswer = function () {
        this.showTextOverlay("RTC Answer");
    };
    /**
     * Shows a text overlay to alert the user the stream is currently loading
     */
    DelegateBase.prototype.onStreamLoading = function () {
        this.showTextOverlay("Loading Stream");
    };
    /**
     * Event fired when the video is disconnected
     */
    DelegateBase.prototype.onDisconnect = function (eventString) {
        // if we have overridden the default disconnection messsage, assign the new value here
        if (this.iWebRtcController.getDisconnectMessageOverride() != "" && this.iWebRtcController.getDisconnectMessageOverride() !== undefined && this.iWebRtcController.getDisconnectMessageOverride() != null) {
            eventString = this.iWebRtcController.getDisconnectMessageOverride();
            this.iWebRtcController.setDisconnectMessageOverride('');
        }
        if (this.showActionOrErrorOnDisconnect == false) {
            this.showErrorOverlay("Disconnected: " + eventString);
            this.showActionOrErrorOnDisconnect = true;
        }
        else {
            this.showDisconnectOverlay("Disconnected: " + eventString + "  \n Click To Restart");
        }
    };
    /**
     * Handles when Web Rtc is connecting
     */
    DelegateBase.prototype.onWebRtcConnecting = function () {
        this.showTextOverlay("Starting connection to server, please wait");
    };
    /**
     * Handles when Web Rtc has connected
     */
    DelegateBase.prototype.onWebRtcConnected = function () {
        this.showTextOverlay("WebRTC connected, waiting for video");
    };
    /**
     * Handles when Web Rtc fails to connect
     */
    DelegateBase.prototype.onWebRtcFailed = function () {
        this.showErrorOverlay("Unable to setup video");
    };
    /**
     * Set up methods and functions to run when the video is initialised
     */
    DelegateBase.prototype.onVideoInitialised = function () { };
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    DelegateBase.prototype.onLatencyTestResult = function (latency) { };
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    DelegateBase.prototype.onVideoStats = function (videoStats) { };
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    DelegateBase.prototype.onVideoEncoderAvgQP = function (QP) { };
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    DelegateBase.prototype.onInitialSettings = function (settings) { };
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    DelegateBase.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    return DelegateBase;
}());



/***/ }),

/***/ "./src/FreezeFrame/FreezeFrame.ts":
/*!****************************************!*\
  !*** ./src/FreezeFrame/FreezeFrame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrame": () => (/* binding */ FreezeFrame)
/* harmony export */ });
/**
 * A class for managing the freeze frame object
 */
var FreezeFrame = /** @class */ (function () {
    /**
     * Construct a freeze frame
     * @param rootDiv the div that a freeze frame element will be created into
     */
    function FreezeFrame(rootDiv) {
        this.freezeFrameHeight = 0;
        this.freezeFrameWidth = 0;
        this.rootDiv = rootDiv;
        // create the overlay
        this.rootElement = document.createElement('div');
        this.rootElement.id = 'freezeFrame';
        this.rootElement.style.display = 'none';
        this.rootElement.style.pointerEvents = 'none';
        this.rootElement.style.position = 'absolute';
        this.rootElement.style.zIndex = '20';
        // create the image place holder
        this.imageElement = document.createElement('img');
        this.imageElement.style.position = 'absolute';
        // append the image into the root element and append the element to the root div
        this.rootElement.appendChild(this.imageElement);
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Set the freeze frame element for showing
     */
    FreezeFrame.prototype.setElementForShow = function () {
        this.rootElement.style.display = 'block';
    };
    /**
     * Set the freeze frame element for hiding
     */
    FreezeFrame.prototype.setElementForHide = function () {
        this.rootElement.style.display = 'none';
    };
    /**
     * Update the freeze frames image source
     * @param jpeg the freeze frame image as a byte array data
     */
    FreezeFrame.prototype.updateImageElementSource = function (jpeg) {
        var base64 = btoa(jpeg.reduce(function (data, byte) { return data + String.fromCharCode(byte); }, ''));
        this.imageElement.src = 'data:image/jpeg;base64,' + base64;
    };
    /**
     * Set the dimensions for the freeze frame from the element and resize it
     */
    FreezeFrame.prototype.setDimensionsFromElementAndResize = function () {
        this.freezeFrameHeight = this.imageElement.naturalHeight;
        this.freezeFrameWidth = this.imageElement.naturalWidth;
        this.resize();
    };
    /**
     * Resize a freeze frame element
     */
    FreezeFrame.prototype.resize = function () {
        if (this.freezeFrameWidth !== 0 && this.freezeFrameHeight !== 0) {
            var displayWidth = 0;
            var displayHeight = 0;
            var displayTop = 0;
            var displayLeft = 0;
            if (this.enlargeDisplayToFillWindow === null || this.enlargeDisplayToFillWindow === true) {
                var windowAspectRatio = window.innerWidth / window.innerHeight;
                var videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
                if (windowAspectRatio < videoAspectRatio) {
                    displayWidth = window.innerWidth;
                    displayHeight = Math.floor(window.innerWidth / videoAspectRatio);
                    displayTop = Math.floor((window.innerHeight - displayHeight) * 0.5);
                    displayLeft = 0;
                }
                else {
                    displayWidth = Math.floor(window.innerHeight * videoAspectRatio);
                    displayHeight = window.innerHeight;
                    displayTop = 0;
                    displayLeft = Math.floor((window.innerWidth - displayWidth) * 0.5);
                }
            }
            else {
                // Video is coming in at native resolution, we care more about the player size
                var playerAspectRatio = this.rootDiv.offsetWidth / this.rootDiv.offsetHeight;
                var videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
                if (playerAspectRatio < videoAspectRatio) {
                    displayWidth = this.rootDiv.offsetWidth;
                    displayHeight = Math.floor(this.rootDiv.offsetWidth / videoAspectRatio);
                    displayTop = Math.floor((this.rootDiv.offsetHeight - displayHeight) * 0.5);
                    displayLeft = 0;
                }
                else {
                    displayWidth = Math.floor(this.rootDiv.offsetHeight * videoAspectRatio);
                    displayHeight = this.rootDiv.offsetHeight;
                    displayTop = 0;
                    displayLeft = Math.floor((this.rootDiv.offsetWidth - displayWidth) * 0.5);
                }
            }
            this.rootElement.style.width = this.rootDiv.offsetWidth + 'px';
            this.rootElement.style.height = this.rootDiv.offsetHeight + 'px';
            this.rootElement.style.left = 0 + 'px';
            this.rootElement.style.top = 0 + 'px';
            this.imageElement.style.width = displayWidth + 'px';
            this.imageElement.style.height = displayHeight + 'px';
            this.imageElement.style.left = displayLeft + 'px';
            this.imageElement.style.top = displayTop + 'px';
        }
    };
    return FreezeFrame;
}());



/***/ }),

/***/ "./src/FreezeFrame/FreezeFrameController.ts":
/*!**************************************************!*\
  !*** ./src/FreezeFrame/FreezeFrameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrameController": () => (/* binding */ FreezeFrameController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _FreezeFrame__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FreezeFrame */ "./src/FreezeFrame/FreezeFrame.ts");


/**
 * A class for controlling freeze frame functionality
 */
var FreezeFrameController = /** @class */ (function () {
    /**
     * Construct a freeze frame controller
     * @param rootDiv the div that a freeze frame element will be created into
     */
    function FreezeFrameController(rootDiv) {
        this.receiving = false;
        this.size = 0;
        this.jpeg = undefined;
        this.valid = false;
        this.freezeFrame = new _FreezeFrame__WEBPACK_IMPORTED_MODULE_1__.FreezeFrame(rootDiv);
    }
    /**
     * Show the freeze frame if it is valid
     */
    FreezeFrameController.prototype.showFreezeFrame = function () {
        if (this.valid) {
            this.freezeFrame.setElementForShow();
        }
    };
    /**
     * Hide the freeze frame and set the validity to false
     */
    FreezeFrameController.prototype.hideFreezeFrame = function () {
        this.valid = false;
        this.freezeFrame.setElementForHide();
    };
    /**
     * Update the freeze frames image source and load it
     * @param jpeg the freeze frame image as a byte array data
     * @param onLoadCallBack a call back for managing if the play overlay needs to be shown or not
     */
    FreezeFrameController.prototype.updateFreezeFrameAndShow = function (jpeg, onLoadCallBack) {
        var _this = this;
        this.freezeFrame.updateImageElementSource(jpeg);
        this.freezeFrame.imageElement.onload = function () {
            _this.freezeFrame.setDimensionsFromElementAndResize();
            onLoadCallBack();
        };
    };
    /**
     * Process the new freeze frame image and update it
     * @param view the freeze frame image as a byte array data
     * @param onLoadCallBack a call back for managing if the play overlay needs to be shown or not
     */
    FreezeFrameController.prototype.processFreezeFrameMessage = function (view, onLoadCallBack) {
        // Reset freeze frame if we got a freeze frame message and we are not "receiving" yet.
        if (!this.receiving) {
            this.receiving = true;
            this.valid = false;
            this.size = 0;
            this.jpeg = undefined;
        }
        // Extract total size of freeze frame (across all chunks)
        this.size = (new DataView(view.slice(1, 5).buffer)).getInt32(0, true);
        // Get the jpeg part of the payload
        var jpegBytes = view.slice(1 + 4);
        // Append to existing jpeg that holds the freeze frame
        if (this.jpeg) {
            var jpeg = new Uint8Array(this.jpeg.length + jpegBytes.length);
            jpeg.set(this.jpeg, 0);
            jpeg.set(jpegBytes, this.jpeg.length);
            this.jpeg = jpeg;
        }
        // No existing freeze frame jpeg, make one
        else {
            this.jpeg = jpegBytes;
            this.receiving = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received first chunk of freeze frame: " + this.jpeg.length + "/" + this.size, 6);
        }
        // Finished receiving freeze frame, we can show it now
        if (this.jpeg.length === this.size) {
            this.receiving = false;
            this.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received complete freeze frame " + this.size, 6);
            this.updateFreezeFrameAndShow(this.jpeg, onLoadCallBack);
        }
        // We received more data than the freeze frame payload message indicate (this is an error)
        else if (this.jpeg.length > this.size) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received bigger freeze frame than advertised: " + this.jpeg.length + "/" + this.size);
            this.jpeg = undefined;
            this.receiving = false;
        }
    };
    return FreezeFrameController;
}());



/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoPlayerElement - The video player DOM element
 */
var FakeTouchController = /** @class */ (function () {
    function FakeTouchController(dataChannelController, videoPlayerElement) {
        var _this = this;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoPlayerElement = videoPlayerElement;
        document.ontouchstart = function (ev) { return _this.onTouchStart(ev); };
        document.ontouchend = function (ev) { return _this.onTouchEnd(ev); };
        document.ontouchmove = function (ev) { return _this.onTouchMove(ev); };
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    FakeTouchController.prototype.onTouchStart = function (touch) {
        if (this.finger == null) {
            var first_touch = touch.changedTouches[0];
            this.finger = {
                ID: first_touch.identifier,
                X: first_touch.clientX - this.videoPlayerElement.getBoundingClientRect().left,
                Y: first_touch.clientY - -this.videoPlayerElement.getBoundingClientRect().top
            };
            var mouseEvent = new MouseEvent(touch.type, first_touch);
            this.videoPlayerElement.onmouseenter(mouseEvent);
            this.ueInputMouseMessage.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, this.finger.X, this.finger.Y);
        }
    };
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchEnd = function (touchEvent) {
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, x, y);
                var mouseEvent = new MouseEvent(touchEvent.type, touch);
                this.videoPlayerElement.onmouseleave(mouseEvent);
                this.finger = null;
            }
        }
    };
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchMove = function (touchEvent) {
        for (var i = 0; i < touchEvent.touches.length; i++) {
            var touch = touchEvent.touches[i];
            if (touch.identifier === this.finger.ID) {
                var x = touch.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touch.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseMove(x, y, x - this.finger.X, y - this.finger.Y);
                this.finger.X = x;
                this.finger.Y = y;
            }
        }
    };
    return FakeTouchController;
}());



/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputGamePadMessage */ "./src/UeInstanceMessage/UeInputGamePadMessage.ts");


/**
 * The class that handles the functionality of gamepads and controllers
 */
var GamePadController = /** @class */ (function () {
    /**
     * @param dataChannelController - the data chanel controller
     */
    function GamePadController(dataChannelController) {
        var _this = this;
        this.ueInputGamePadMessage = new _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputGamePadMessage(dataChannelController);
        if ("GamepadEvent" in window) {
            window.addEventListener("gamepadconnected", function (ev) { return _this.gamePadConnectHandler(ev); });
            window.addEventListener("gamepaddisconnected", function (ev) { return _this.gamePadDisconnectHandler(ev); });
        }
        else if ("WebKitGamepadEvent" in window) {
            window.addEventListener("webkitgamepadconnected", function (ev) { return _this.gamePadConnectHandler(ev); });
            window.addEventListener("webkitgamepaddisconnected", function (ev) { return _this.gamePadDisconnectHandler(ev); });
        }
        this.controllers = [];
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadConnectHandler = function (gamePadEvent) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Gamepad connect handler", 6);
        var gamepad = gamePadEvent.gamepad;
        var temp = {
            currentState: gamepad,
            prevState: gamepad
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "gamepad: " + gamepad.id + " connected", 6);
        window.requestAnimationFrame(function () { return _this.updateStatus(); });
    };
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadDisconnectHandler = function (gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Gamepad disconnect handler", 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "gamepad: " + gamePadEvent.gamepad.id + " disconnected", 6);
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter(function (controller) { return controller !== undefined; });
    };
    /**
     * Scan for connected gamepads
     */
    GamePadController.prototype.scanGamePads = function () {
        var gamepads = ((navigator.getGamepads) ? navigator.getGamepads() : []); //  : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
        for (var i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && (gamepads[i].index in this.controllers)) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    };
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    GamePadController.prototype.updateStatus = function () {
        var _this = this;
        this.scanGamePads();
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {
            var controller = _a[_i];
            try {
                var currentState = controller.currentState;
                for (var i = 0; i < controller.currentState.buttons.length; i++) {
                    var currentButton = controller.currentState.buttons[i];
                    var previousButton = controller.prevState.buttons[i];
                    // Button 6 is actually the left trigger, send it to UE as an analog axis
                    // Button 7 is actually the right trigger, send it to UE as an analog axis
                    // The rest are normal buttons. Treat as such
                    if (currentButton.pressed && !previousButton.pressed) {
                        // New press
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, false);
                        }
                    }
                    else if (!currentButton.pressed && previousButton.pressed) {
                        // release
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, 0);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, 0);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonReleased(currentState.index, i);
                        }
                    }
                    else if (currentButton.pressed && previousButton.pressed) {
                        // repeat press / hold
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, true);
                        }
                    }
                    // Last case is button isn't currently pressed and wasn't pressed before. This doesn't need an else block
                }
                for (var i = 0; i < currentState.axes.length; i += 2) {
                    var x = parseFloat(currentState.axes[i].toFixed(4));
                    // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                    var y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                    if (i === 0) {
                        // left stick
                        // axis 1 = left horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 1, x);
                        // axis 2 = left vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 2, y);
                    }
                    else if (i === 2) {
                        // right stick
                        // axis 3 = right horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 3, x);
                        // axis 4 = right vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 4, y);
                    }
                }
                this.controllers[currentState.index].prevState = currentState;
            }
            catch (error) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Oh dear the gamepad poll loop has thrown an error");
            }
        }
        window.requestAnimationFrame(function () { return _this.updateStatus(); });
    };
    return GamePadController;
}());



/***/ }),

/***/ "./src/Inputs/GyroController.ts":
/*!**************************************!*\
  !*** ./src/Inputs/GyroController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GyroController": () => (/* binding */ GyroController)
/* harmony export */ });
/**
 * The Class that handles gyro input
 */
var GyroController = /** @class */ (function () {
    function GyroController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    return GyroController;
}());



/***/ }),

/***/ "./src/Inputs/InputController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/InputController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputController": () => (/* binding */ InputController)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseLockedEvents */ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseHoverEvents */ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts");
/* harmony import */ var _GyroController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GyroController */ "./src/Inputs/GyroController.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");










/**
 * Class for handling inputs for mouse and keyboard
 */
var InputController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     */
    function InputController(dataChannelController, videoElementProvider) {
        this.dataChannelController = dataChannelController;
        this.videoElementProvider = videoElementProvider;
    }
    /**
     * registers browser key events
     * @param suppressBrowserKeys - option to suppress browser keys
     */
    InputController.prototype.registerKeyBoard = function (suppressBrowserKeys) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Keyboard Events", 7);
        this.keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.dataChannelController, suppressBrowserKeys);
        this.keyboardController.registerKeyBoardEvents();
    };
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     */
    InputController.prototype.registerMouse = function (controlScheme) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Mouse Events", 7);
        // casting these as any as they do not have the moz attributes we require
        var videoElement = this.videoElementProvider.getVideoElement();
        var videoInputBindings;
        this.mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.dataChannelController, this.videoElementProvider);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.LockedMouse:
                videoInputBindings = new _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__.VideoPlayerMouseLockedEvents(this.videoElementProvider, this.mouseController);
                videoElement.onclick = function (event) { return _this.videoElementProvider.setClickActions(event); };
                document.addEventListener('pointerlockchange', function () { return videoInputBindings.handleLockStateChange(); }, false);
                document.addEventListener('mozpointerlockchange', function () { return videoInputBindings.handleLockStateChange(); }, false);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.HoveringMouse:
                videoInputBindings = new _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__.VideoPlayerMouseHoverEvents(this.mouseController);
                // set the onclick to null if the input bindings were previously set to pointerlock
                videoElement.onclick = null;
                document.onmousemove = function (mouseEvent) { return videoInputBindings.handleMouseMove(mouseEvent); };
                document.onwheel = function (mouseEvent) { return videoInputBindings.handleMouseWheel(mouseEvent); };
                videoElement.onmousedown = function (mouseEvent) { return videoInputBindings.handleMouseDown(mouseEvent); };
                videoElement.onmouseup = function (mouseEvent) { return videoInputBindings.handleMouseUp(mouseEvent); };
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "unknown Control Scheme Type Defaulting to Locked Mouse Events");
                break;
        }
    };
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     * @param playerElement - the player elements DOM
     */
    InputController.prototype.registerTouch = function (fakeMouseTouch, playerElement) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Registering Touch", 6);
        if (fakeMouseTouch) {
            this.touchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__.FakeTouchController(this.dataChannelController, playerElement.getElementsByTagName("video")[0]);
        }
        else {
            this.touchController = new _TouchController__WEBPACK_IMPORTED_MODULE_3__.TouchController(this.dataChannelController, playerElement, this.videoElementProvider);
        }
    };
    /**
     * registers a gamepad
     */
    InputController.prototype.registerGamePad = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Game Pad", 7);
        this.gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_4__.GamePadController(this.dataChannelController);
    };
    /**
     * registers a gyro device
     */
    InputController.prototype.registerGyro = function () {
        this.gyroController = new _GyroController__WEBPACK_IMPORTED_MODULE_8__.GyroController(this.dataChannelController);
    };
    return InputController;
}());



/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputKeyboardMessage */ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Keyboard Inputs for the document
 */
var KeyboardController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     * @param suppressBrowserKeys - Suppress Browser Keys
     */
    function KeyboardController(dataChannelController, suppressBrowserKeys) {
        this.ueInputKeyBoardMessage = new _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputKeyboardMessage(dataChannelController);
        this.suppressBrowserKeys = suppressBrowserKeys;
    }
    /**
     * Registers document keyboard events with the controller
     */
    KeyboardController.prototype.registerKeyBoardEvents = function () {
        var _this = this;
        document.onkeydown = function (ev) { return _this.handleOnKeyDown(ev); };
        document.onkeyup = function (ev) { return _this.handleOnKeyUp(ev); };
        //This has been deprecated as at Jun 13 2021
        document.onkeypress = function (ev) { return _this.handleOnKeyPress(ev); };
    };
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyDown = function (keyboardEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnKeyDown", 6);
        this.ueInputKeyBoardMessage.sendKeyDown(this.getKeycode(keyboardEvent), keyboardEvent.repeat);
        /* this needs to be tested but it is believed that this is not needed*/
        // backSpace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE4 text entry field.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace) {
            //let temp: KeyboardEvent = {charCode: SpecialKeyCodes.backSpace};
            //document.onkeypress({ charCode: SpecialKeyCodes.backSpace });
        }
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyUp = function (keyboardEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnKeyUp", 6);
        this.ueInputKeyBoardMessage.sendKeyUp(this.getKeycode(keyboardEvent));
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    KeyboardController.prototype.handleOnKeyPress = function (keyboard) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnkeypress", 6);
        this.ueInputKeyBoardMessage.sendKeyPress(keyboard.charCode);
    };
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns the key code of the Key
     */
    KeyboardController.prototype.getKeycode = function (keyboardEvent) {
        //Need to move this to a newer version using keyboard event location. as keyboardEvent.keycode is deprecated
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.shift && keyboardEvent.code === 'ShiftRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightShift;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.control && keyboardEvent.code === 'ControlRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightControl;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.alt && keyboardEvent.code === 'AltRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightAlt;
        else
            return keyboardEvent.keyCode;
    };
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     */
    KeyboardController.prototype.isKeyCodeBrowserKey = function (keyCode) {
        // Function keys or tab key.
        return keyCode >= 112 && keyCode <= 123 || keyCode === 9;
    };
    return KeyboardController;
}());

/* 5457524f4d4d */ 


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
var MouseButton = /** @class */ (function () {
    function MouseButton() {
    }
    MouseButton.mainButton = 0; // Left button.
    MouseButton.auxiliaryButton = 1; // Wheel button.
    MouseButton.secondaryButton = 2; // Right button.
    MouseButton.fourthButton = 3; // Browser Back button.
    MouseButton.fifthButton = 4; // Browser Forward button.
    return MouseButton;
}());

/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
var MouseButtonsMask = /** @class */ (function () {
    function MouseButtonsMask() {
    }
    MouseButtonsMask.primaryButton = 1; // Left button.
    MouseButtonsMask.secondaryButton = 2; // Right button.
    MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
    MouseButtonsMask.fourthButton = 8; // Browser Back button.
    MouseButtonsMask.fifthButton = 16; // Browser Forward button.
    return MouseButtonsMask;
}());



/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Mouse Inputs for the document
 */
var MouseController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function MouseController(dataChannelController, videoElementProvider) {
        this.unsignedOutOfRange = 65535;
        this.signedOutOfRange = 32767;
        this.printInputs = false;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoElementProvider = videoElementProvider;
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.releaseMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.pressMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse is moved
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     * @param deltaX - Mouse Delta X Coordinate
     * @param deltaY - Mouse Delta Y Coordinate
     */
    MouseController.prototype.sendMouseMove = function (X, Y, deltaX, deltaY) {
        if (this.printInputs) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "x: " + X + ", y:" + Y + ", dX: " + deltaX + ", dY: " + deltaY, 7);
        }
        var mouseCord = this.normaliseAndQuantiseUnsigned(X, Y);
        var deltaCode = this.normaliseAndQuantiseSigned(deltaX, deltaY);
        this.ueInputMouseMessage.sendMouseMove(mouseCord.x, mouseCord.y, deltaCode.x, deltaCode.y);
    };
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseDown = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse button " + button + " down at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseDown(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseUp = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse button " + button + " up at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseUp(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse wheel event
     * @param deltaY - Mouse Wheel data
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseWheel = function (deltaY, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse wheel with delta " + deltaY + " at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseWheel(deltaY, coord.x, coord.y);
    };
    /**
     * Handles mouse enter
     */
    MouseController.prototype.sendMouseEnter = function () {
        this.ueInputMouseMessage.sendMouseEnter();
    };
    /**
     * Handles mouse Leave
     */
    MouseController.prototype.sendMouseLeave = function () {
        this.ueInputMouseMessage.sendMouseLeave();
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Unsigned Data Type
     */
    MouseController.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / rootDiv.clientWidth;
                var normalizedY = ratio * (y / rootDiv.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = ratio * (x / rootDiv.clientWidth - 0.5) + 0.5;
                var normalizedY = y / rootDiv.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    /**
     * Denormalises and unquantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - unquantise and Denormalize Unsigned Data Type
     */
    MouseController.prototype.unquantiseAndDenormaliseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (this.unsignedOutOfRange + 1);
                var normalizedY = (y / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                return {
                    x: normalizedX * rootDiv.clientWidth,
                    y: normalizedY * rootDiv.clientHeight
                };
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = (x / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                var normalizedY = y / (this.unsignedOutOfRange + 1);
                return {
                    x: normalizedX * rootDiv.clientWidth,
                    y: normalizedY * rootDiv.clientHeight
                };
            }
        }
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Signed Data Type
     */
    MouseController.prototype.normaliseAndQuantiseSigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (0.5 * rootDiv.clientWidth);
                var normalizedY = (ratio * y) / (0.5 * rootDiv.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Signed.
                var normalizedX = (ratio * x) / (0.5 * rootDiv.clientWidth);
                var normalizedY = y / (0.5 * rootDiv.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
        }
    };
    return MouseController;
}());



/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
var SpecialKeyCodes = /** @class */ (function () {
    function SpecialKeyCodes() {
    }
    SpecialKeyCodes.backSpace = 8;
    SpecialKeyCodes.shift = 16;
    SpecialKeyCodes.control = 17;
    SpecialKeyCodes.alt = 18;
    SpecialKeyCodes.rightShift = 253;
    SpecialKeyCodes.rightControl = 254;
    SpecialKeyCodes.rightAlt = 255;
    return SpecialKeyCodes;
}());



/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputTouchMessage */ "./src/UeInstanceMessage/UeInputTouchMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");


/**
 * Handles the Touch input Events
 */
var TouchController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     * @param playerElement - the player element DOM
     */
    function TouchController(dataChannelController, playerElement, videoElementProvider) {
        var _this = this;
        this.ueInputTouchMessage = new _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputTouchMessage(dataChannelController, videoElementProvider);
        this.playerElement = playerElement;
        this.playerElement.ontouchstart = function (ev) { return _this.onTouchStart(ev); };
        this.playerElement.ontouchend = function (ev) { return _this.onTouchEnd(ev); };
        this.playerElement.ontouchmove = function (ev) { return _this.onTouchMove(ev); };
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Touch Events Registered", 6);
    }
    /**
     * When a touch event starts
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchStart = function (touchEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Touch Start", 6);
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            var finger = this.ueInputTouchMessage.fingers.pop();
            if (finger === undefined) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "who has more then 10 fingers", 6);
            }
            this.ueInputTouchMessage.fingersIds[touch.identifier] = finger;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch.identifier: " + touch.identifier, 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "finger: " + finger, 6);
        }
        this.ueInputTouchMessage.sendTouchStart(touchEvent.changedTouches);
        touchEvent.preventDefault();
    };
    /**
     * When a touch event ends
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchEnd = function (touchEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Touch END", 6);
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Forget Touch", 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch id: " + touch.identifier, 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Fingers id Touch id: " + this.ueInputTouchMessage.fingersIds[touch.identifier], 6);
            this.ueInputTouchMessage.fingers.push(this.ueInputTouchMessage.fingersIds[touch.identifier]);
            this.ueInputTouchMessage.fingers.sort(function (a, b) { return b - a; });
            delete this.ueInputTouchMessage.fingersIds[touch.identifier];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch.identifier: " + touch.identifier, 6);
        }
        this.ueInputTouchMessage.sendTouchEnd(touchEvent.changedTouches);
        touchEvent.preventDefault();
    };
    /**
     * when a moving touch event occurs
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchMove = function (touchEvent) {
        for (var i = 0; i < touchEvent.touches.length; i++) {
            var touch = touchEvent.touches[i];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "X: " + touch.clientX + " Y: " + touch.clientY, 6);
        }
        this.ueInputTouchMessage.sendTouchMove(touchEvent.touches);
        touchEvent.preventDefault();
    };
    return TouchController;
}());



/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
var Logger = /** @class */ (function () {
    function Logger() {
    }
    /**
     * Captures the stack and returns it
     * @returns the current stack
     */
    Logger.GetStackTrace = function () {
        var error = new Error();
        var formattedStack = "No Stack Available for this browser";
        // format the error
        if (error.stack) {
            formattedStack = error.stack.toString().replace(/Error/g, '');
        }
        return formattedStack;
    };
    ;
    /**
     * Set the log verbosity level
     */
    Logger.SetLoggerVerbosity = function (verboseLogLevel) {
        if (this.verboseLogLevel != null) {
            this.verboseLogLevel = verboseLogLevel;
        }
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    Logger.Log = function (stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        var returnString = "Level: Log, Caller: " + stack + ", Msg: " + message;
        console.log(returnString);
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    Logger.Info = function (stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        var returnString = "Level: Info, Msg: " + message;
        console.info(returnString);
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    Logger.Error = function (stack, message) {
        var returnString = "Level: Error, Caller: " + stack + ", Msg: " + message;
        console.error(returnString);
    };
    Logger.verboseLogLevel = 7;
    return Logger;
}());



/***/ }),

/***/ "./src/MicPlayer/MicController.ts":
/*!****************************************!*\
  !*** ./src/MicPlayer/MicController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MicController": () => (/* binding */ MicController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

var MicController = /** @class */ (function () {
    function MicController(urlParams) {
        // get the mic status from the url 
        this.useMic = urlParams.has('useMic');
        if (this.useMic) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Microphone access is enabled IT IS EXPERIMENTAL AND IS NOT PROPERLY SUPPORTED ACROSS UE. IF IT DOES NOT WORK ITS YOUR OWN FAULT! YOU HAVE BEEN TOLD.");
        }
        // if (!this.useMic) {
        //     Logger.Log(Logger.GetStackTrace(), "Microphone access is not enabled. Pass ?useMic in the url to enable it.");
        // }
        // check if the connection is not local and is https or mic will not work 
        this.isLocalhostConnection = location.hostname === "localhost" || location.hostname === "127.0.0.1";
        this.isHttpsConnection = location.protocol === 'https:';
        if (this.useMic && !this.isLocalhostConnection && !this.isHttpsConnection) {
            this.useMic = false;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.");
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
        }
    }
    return MicController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InboundAudioStats */ "./src/PeerConnectionController/InboundAudioStats.ts");
/* harmony import */ var _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InboundVideoStats */ "./src/PeerConnectionController/InboundVideoStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OutBoundVideoStats */ "./src/PeerConnectionController/OutBoundVideoStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};








var AggregatedStats = /** @class */ (function () {
    function AggregatedStats() {
        this.inboundVideoStats = new _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__.inboundVideoStats();
        this.inboundAudioStats = new _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__.inboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__.CandidatePairStats();
        this.dataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.dataChannelStats();
        this.outBoundVideoStats = new _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__.OutBoundVideoStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_6__.StreamStats();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    AggregatedStats.prototype.processStats = function (rtcStatsReport) {
        var _this = this;
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach(function (stat) {
            var type = stat.type;
            switch (type) {
                case "candidate-pair":
                    _this.handleCandidatePair(stat);
                    break;
                case "certificate":
                    break;
                case "codec":
                    break;
                case "csrc":
                    break;
                case "data-channel":
                    _this.handleDataChannel(stat);
                    break;
                case "inbound-rtp":
                    _this.handleInBoundRTP(stat);
                    break;
                case "local-candidate":
                    _this.handleLocalCandidate(stat);
                    break;
                case "media-source":
                    break;
                case "outbound-rtp":
                    break;
                case "peer-connection":
                    break;
                case "remote-candidate":
                    _this.handleRemoteCandidate(stat);
                    break;
                case "remote-inbound-rtp":
                    break;
                case "remote-outbound-rtp":
                    _this.handleRemoteOutBound(stat);
                    break;
                case "track":
                    _this.handleTrack(stat);
                    break;
                case "transport":
                    break;
                case "stream":
                    _this.handleStream(stat);
                    break;
                default:
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), "unhandled Stat Type");
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), stat);
                    break;
            }
        });
    };
    /**
     * Process stream stats data from webrtc
     *
     * @param stat the stats coming in from webrtc
     */
    AggregatedStats.prototype.handleStream = function (stat) {
        this.streamStats = stat;
    };
    /**
     * Process the Ice Candidate Pair Data
     */
    AggregatedStats.prototype.handleCandidatePair = function (stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    };
    /**
     * Process the Data Channel Data
     */
    AggregatedStats.prototype.handleDataChannel = function (stat) {
        this.dataChannelStats.bytesReceived = stat.dataytesReceived;
        this.dataChannelStats.bytesSent = stat.bytesSent;
        this.dataChannelStats.dataChannelIdentifier = stat.dataChannelIdentifier;
        this.dataChannelStats.id = stat.id;
        this.dataChannelStats.label = stat.label;
        this.dataChannelStats.messagesReceived = stat.messagesReceived;
        this.dataChannelStats.messagesSent = stat.messagesSent;
        this.dataChannelStats.protocol = stat.protocol;
        this.dataChannelStats.state = stat.state;
        this.dataChannelStats.timestamp = stat.timestamp;
    };
    /**
     * Process the Local Ice Candidate Data
     */
    AggregatedStats.prototype.handleLocalCandidate = function (stat) {
        var localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        localCandidate.label = "local-candidate";
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    };
    /**
     * Process the Remote Ice Candidate Data
     */
    AggregatedStats.prototype.handleRemoteCandidate = function (stat) {
        var RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        RemoteCandidate.label = "local-candidate";
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    };
    /**
     * Process the Inbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleInBoundRTP = function (stat) {
        switch (stat.kind) {
            case "video":
                this.inboundVideoStats.timestamp = stat.timestamp;
                this.inboundVideoStats.bytesReceived = stat.bytesReceived;
                this.inboundVideoStats.framesDecoded = stat.framesDecoded;
                this.inboundVideoStats.packetsLost = stat.packetsLost;
                this.inboundVideoStats.jitter = stat.jitter;
                this.inboundVideoStats.bytesReceivedStart = (this.inboundVideoStats.bytesReceivedStart == null) ? stat.bytesReceived : this.inboundVideoStats.bytesReceivedStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                this.inboundVideoStats.timestampStart = (this.inboundVideoStats.timestampStart == null) ? stat.timestamp : this.inboundVideoStats.timestampStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate = 8 * (stat.bytesReceived - this.lastVideoStats.bytesReceived) / (stat.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.lowBitrate == undefined || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.bitrate < this.inboundVideoStats.lowBitrate || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.highBitrate == undefined || Number.isNaN(this.inboundVideoStats.highBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.bitrate > this.inboundVideoStats.highBitrate) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.avgBitrate = 8 * (this.inboundVideoStats.bytesReceived - this.lastVideoStats.bytesReceived) / (this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.avgBitrate = Math.floor(this.inboundVideoStats.avgBitrate);
                    this.inboundVideoStats.framerate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecoded) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp) / 1000);
                    this.inboundVideoStats.framerate = Math.floor(this.inboundVideoStats.framerate);
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.lowFramerate == undefined || Number.isNaN(this.inboundVideoStats.lowFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.lowFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.highFramerate == undefined || Number.isNaN(this.inboundVideoStats.highFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.highFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.averageFrameRate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecodedStart) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestampStart) / 1000);
                    this.inboundVideoStats.averageFrameRate = Math.floor(this.inboundVideoStats.averageFrameRate);
                }
                this.lastVideoStats = __assign({}, this.inboundVideoStats);
                break;
            case "audio":
                this.inboundAudioStats.bytesReceived = stat.bytesReceived;
                this.inboundAudioStats.jitter = stat.jitter;
                this.inboundAudioStats.packetsLost = stat.packetslost;
                this.inboundAudioStats.timestamp = stat.timestamp;
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), "Kind is not handled");
                break;
        }
    };
    /**
     * Process the outbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleRemoteOutBound = function (stat) {
        switch (stat.kind) {
            case "video":
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case "audio":
                break;
            default:
                break;
        }
    };
    /**
     * Process the Inbound Video Track Data
     */
    AggregatedStats.prototype.handleTrack = function (stat) {
        // we only want to extract stats from the video track
        if (stat.type === 'track' && (stat.trackIdentifier === 'video_label' || stat.kind === 'video')) {
            this.inboundVideoStats.framesDropped = stat.framesDropped;
            this.inboundVideoStats.framesReceived = stat.framesReceived;
            this.inboundVideoStats.framesDroppedPercentage = stat.framesDropped / stat.framesReceived * 100;
            this.inboundVideoStats.frameHeight = stat.frameHeight;
            this.inboundVideoStats.frameWidth = stat.frameWidth;
            this.inboundVideoStats.frameHeightStart = (this.inboundVideoStats.frameHeightStart == null) ? stat.frameHeight : this.inboundVideoStats.frameHeightStart;
            this.inboundVideoStats.frameWidthStart = (this.inboundVideoStats.frameWidthStart == null) ? stat.frameWidth : this.inboundVideoStats.frameWidthStart;
        }
    };
    /**
     * Check if a value coming in from our stats is actually a number
     */
    AggregatedStats.prototype.isNumber = function (value) {
        return typeof value === 'number' && isFinite(value);
    };
    return AggregatedStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
var CandidatePairStats = /** @class */ (function () {
    function CandidatePairStats() {
    }
    return CandidatePairStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
var CandidateStat = /** @class */ (function () {
    function CandidateStat() {
    }
    return CandidateStat;
}());



/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dataChannelStats": () => (/* binding */ dataChannelStats)
/* harmony export */ });
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
var dataChannelStats = /** @class */ (function () {
    function dataChannelStats() {
    }
    return dataChannelStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundAudioStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundAudioStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inboundAudioStats": () => (/* binding */ inboundAudioStats)
/* harmony export */ });
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
var inboundAudioStats = /** @class */ (function () {
    function inboundAudioStats() {
    }
    return inboundAudioStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundVideoStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundVideoStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inboundVideoStats": () => (/* binding */ inboundVideoStats)
/* harmony export */ });
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
var inboundVideoStats = /** @class */ (function () {
    function inboundVideoStats() {
        this.receiveToCompositeMs = 0;
        this.timestamp = 0;
        this.bytesReceived = 0;
        this.framesDecoded = 0;
        this.packetsLost = 0;
        this.bytesReceivedStart = 0;
        this.framesDecodedStart = 0;
        this.timestampStart = 0;
        this.bitrate = 0;
        this.lowBitrate = 0;
        this.highBitrate = 0;
        this.avgBitrate = 0;
        this.framerate = 0;
        this.lowFramerate = 0;
        this.highFramerate = 0;
        this.averageFrameRate = 0;
        this.framesDropped = 0;
        this.framesReceived = 0;
        this.framesDroppedPercentage = 0;
        this.frameHeight = 0;
        this.frameWidth = 0;
        this.frameHeightStart = 0;
        this.frameWidthStart = 0;
        this.jitter = 0;
    }
    return inboundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/OutBoundVideoStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundVideoStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
var OutBoundVideoStats = /** @class */ (function () {
    function OutBoundVideoStats() {
    }
    return OutBoundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


/**
 * Handles the Peer Connection
 */
var PeerConnectionController = /** @class */ (function () {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     */
    function PeerConnectionController(options, turnState) {
        var _this = this;
        // Set the turn state to true or false for rtc options
        this.forceTurn = turnState;
        if (this.forceTurn === true) {
            options.iceTransportPolicy = "relay";
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Forcing TURN usage by setting ICE Transport Policy in peer connection config.");
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = function (ev) { return _this.handleSignalStateChange(ev); };
        this.peerConnection.oniceconnectionstatechange = function (ev) { return _this.handleIceConnectionStateChange(ev); };
        this.peerConnection.onicegatheringstatechange = function (ev) { return _this.handleIceGatheringStateChange(ev); };
        this.peerConnection.ontrack = function (ev) { return _this.handleOnTrack(ev); };
        this.peerConnection.onicecandidate = function (ev) { return _this.handelIceCandidate(ev); };
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__.AggregatedStats();
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    PeerConnectionController.prototype.createOffer = function (offerOptions, useMic) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Create Offer", 6);
        this.setupTracksToSendAsync(useMic).finally(function () { });
        this.peerConnection.createOffer(offerOptions).then(function (offer) {
            _this.showTextOverlayConnecting();
            offer.sdp = _this.mungeOffer(offer.sdp, useMic);
            _this.peerConnection.setLocalDescription(offer);
            _this.onSendWebRTCOffer(offer);
        }).catch(function (onRejectedReason) {
            _this.showTextOverlaySetupFailure();
        });
    };
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    PeerConnectionController.prototype.generateStats = function () {
        var _this = this;
        this.peerConnection.getStats(null).then(function (StatsData) {
            _this.aggregatedStats.processStats(StatsData);
            _this.onVideoStats(_this.aggregatedStats);
        });
    };
    /**
     * Close The Peer Connection
     */
    PeerConnectionController.prototype.close = function () {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    };
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    PeerConnectionController.prototype.mungeOffer = function (sdp, useMic) {
        var temp = sdp;
        temp.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, "$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n");
        temp.replace('useinbandfec=1', 'useinbandfec=1;stereo=1;sprop-maxcapturerate=48000');
        // Increase the capture rate of audio so we can have higher quality audio over mic
        if (useMic) {
            temp = temp.replace('useinbandfec=1', 'useinbandfec=1;sprop-maxcapturerate=48000;maxaveragebitrate=510000');
        }
        return temp;
    };
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param sdpAnswer - RTC Session Descriptor from the Signaling Server
     */
    PeerConnectionController.prototype.handleAnswer = function (sdpAnswer) {
        this.peerConnection.setRemoteDescription(sdpAnswer);
    };
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    PeerConnectionController.prototype.handleOnIce = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "peerconnection handleOnIce", 6);
        // // if forcing TURN, reject any candidates not relay
        if (this.forceTurn) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf("relay") < 0) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Dropping candidate because it was not TURN relay. | Type= " + iceCandidate.type + " | Protocol= " + iceCandidate.protocol + " | Address=" + iceCandidate.address + " | Port=" + iceCandidate.port + " |", 6);
                return;
            }
        }
        this.peerConnection.addIceCandidate(iceCandidate);
    };
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    PeerConnectionController.prototype.handleSignalStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'signaling state change: ' + state, 6);
    };
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    PeerConnectionController.prototype.handleIceConnectionStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'ice connection state change: ' + state, 6);
    };
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    PeerConnectionController.prototype.handleIceGatheringStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'ice gathering state change: ' + JSON.stringify(state), 6);
    };
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    PeerConnectionController.prototype.handleOnTrack = function (event) {
        this.onTrack(event);
    };
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    PeerConnectionController.prototype.handelIceCandidate = function (event) {
        this.onPeerIceCandidate(event);
    };
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    PeerConnectionController.prototype.onTrack = function (trackEvent) { };
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    PeerConnectionController.prototype.onPeerIceCandidate = function (peerConnectionIceEvent) { };
    /**
     * Setup tracks on the RTC Peer Connection
     */
    PeerConnectionController.prototype.setupTracksToSendAsync = function (useMic) {
        return __awaiter(this, void 0, void 0, function () {
            var hasTransceivers, audioOptions, mediaSendOptions, stream, _i, _a, transceiver, _b, _c, track, _d, _e, track;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        hasTransceivers = this.peerConnection.getTransceivers().length > 0;
                        // Setup a transceiver for getting UE video
                        this.peerConnection.addTransceiver("video", { direction: "recvonly" });
                        if (!!useMic) return [3 /*break*/, 1];
                        this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        return [3 /*break*/, 3];
                    case 1:
                        audioOptions = useMic ?
                            {
                                autoGainControl: false,
                                channelCount: 1,
                                echoCancellation: false,
                                latency: 0,
                                noiseSuppression: false,
                                sampleRate: 48000,
                                sampleSize: 16,
                                volume: 1.0
                            } : false;
                        mediaSendOptions = {
                            video: false,
                            audio: audioOptions,
                        };
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(mediaSendOptions)];
                    case 2:
                        stream = _f.sent();
                        if (stream) {
                            if (hasTransceivers) {
                                for (_i = 0, _a = this.peerConnection.getTransceivers(); _i < _a.length; _i++) {
                                    transceiver = _a[_i];
                                    if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === "audio") {
                                        for (_b = 0, _c = stream.getTracks(); _b < _c.length; _b++) {
                                            track = _c[_b];
                                            if (track.kind && track.kind == "audio") {
                                                transceiver.sender.replaceTrack(track);
                                                transceiver.direction = "sendrecv";
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                for (_d = 0, _e = stream.getTracks(); _d < _e.length; _d++) {
                                    track = _e[_d];
                                    if (track.kind && track.kind == "audio") {
                                        this.peerConnection.addTransceiver(track, { direction: "sendrecv" });
                                    }
                                }
                            }
                        }
                        else {
                            this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        }
                        _f.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    PeerConnectionController.prototype.onVideoStats = function (event) { };
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    PeerConnectionController.prototype.onSendWebRTCOffer = function (offer) { };
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    PeerConnectionController.prototype.showTextOverlayConnecting = function () { };
    /**
     * An override for showing the Peer connection Failed overlay
     */
    PeerConnectionController.prototype.showTextOverlaySetupFailure = function () { };
    return PeerConnectionController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
/**
 * Class to hold the stream stats data coming in from webRtc
 */
var StreamStats = /** @class */ (function () {
    function StreamStats() {
    }
    return StreamStats;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeControlMessage.ts":
/*!***************************************************!*\
  !*** ./src/UeInstanceMessage/UeControlMessage.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeControlMessage": () => (/* binding */ UeControlMessage)
/* harmony export */ });
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles Sending control messages to the UE Instance
 */
var UeControlMessage = /** @class */ (function (_super) {
    __extends(UeControlMessage, _super);
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeControlMessage(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send IFrame Request to the UE Instance
     */
    UeControlMessage.prototype.SendIFrameRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.iFrameRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    UeControlMessage.prototype.SendRequestQualityControl = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestQualityControl]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Max FPS Request to the UE Instance
     */
    UeControlMessage.prototype.SendMaxFpsRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.maxFpsRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    UeControlMessage.prototype.SendAverageBitrateRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.averageBitrateRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStartStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.startStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStopStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.stopStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Latency Test to the UE Instance
     * @param StartTimeMs - Start Time of the Latency test
     */
    UeControlMessage.prototype.sendLatencyTest = function (StartTimeMs) {
        var payload = {
            StartTime: StartTimeMs,
        };
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.latencyTest, JSON.stringify(payload));
    };
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    UeControlMessage.prototype.SendRequestInitialSettings = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestInitialSettings]);
        this.sendData(payload.buffer);
    };
    return UeControlMessage;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_1__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDataMessage.ts":
/*!************************************************!*\
  !*** ./src/UeInstanceMessage/UeDataMessage.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDataMessage": () => (/* binding */ UeDataMessage)
/* harmony export */ });
/**
 * Handles sending a message to the UE Instance
 */
var UeDataMessage = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeDataMessage(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * Send an Array Buffer to the UE Instance
     * @param buffer - Message Buffer Array
     */
    UeDataMessage.prototype.sendData = function (buffer) {
        this.dataChannelController.sendData(buffer);
    };
    return UeDataMessage;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptor.ts":
/*!***********************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptor.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptor": () => (/* binding */ UeDescriptor)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending a Descriptor to the UE Instance
 */
var UeDescriptor = /** @class */ (function (_super) {
    __extends(UeDescriptor, _super);
    /**
    * @param datachannelController - Data Channel Controller
    */
    function UeDescriptor(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param JSODescriptor - Descriptor Message as JSON
     */
    UeDescriptor.prototype.sendDescriptor = function (messageType, JSODescriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending: " + JSODescriptor, 6);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        var data = new DataView(new ArrayBuffer(1 + 2 + 2 * JSODescriptor.length));
        var byteIdx = 0;
        data.setUint8(byteIdx, messageType);
        byteIdx++;
        data.setUint16(byteIdx, JSODescriptor.length, true);
        byteIdx += 2;
        for (var i = 0; i < JSODescriptor.length; i++) {
            data.setUint16(byteIdx, JSODescriptor.charCodeAt(i), true);
            byteIdx += 2;
        }
        this.sendData(data.buffer);
    };
    return UeDescriptor;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptorUi.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptorUi.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeDescriptorUi": () => (/* binding */ UeDescriptorUi)
/* harmony export */ });
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles the Sending of a UI Descriptor to the UE Instance
 */
var UeDescriptorUi = /** @class */ (function (_super) {
    __extends(UeDescriptorUi, _super);
    /**
     * @param dataChannelController - Data Channel Controller
     */
    function UeDescriptorUi(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send a set res UI Descriptor to UE Instance
     * @param width - Width of res
     * @param height - Height of res
     */
    UeDescriptorUi.prototype.sendUpdateVideoStreamSize = function (width, height) {
        this.sendUiConsoleInteraction("r.setres " + width + "x" + height);
    };
    /**
     * Send a stat fps UI Descriptor to UE Instance
     */
    UeDescriptorUi.prototype.sendShowFps = function () {
        this.sendUiConsoleInteraction("stat fps");
    };
    /**
     * Send a Encoder Rate Control to UE Instance
     * @param rateControl - Rate Control "CBR" | "VBR" | "ConstQP"
     */
    UeDescriptorUi.prototype.sendEncoderRateControl = function (rateControl) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.RateControl " + rateControl);
    };
    /**
     * Send Encoder Target Bit Rate to the UE Instance
     * @param targetBitRate - Send a Target Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderTargetBitRate = function (targetBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.TargetBitrate " + (targetBitRate > 0 ? targetBitRate : -1));
    };
    /**
     * Send Encoder Max Bit Rate VBR to UE Instance
     * @param maxBitRate - Send A Max Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderMaxBitrateVbr = function (maxBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxBitrateVBR " + (maxBitRate > 0 ? maxBitRate : 1));
    };
    /**
     * Send the Minimum Quantization Parameter to the UE Instance
     * @param minQP - Minimum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMinQP = function (minQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MinQP " + minQP);
    };
    /**
     * Send the Maximum Quantization Parameter to the UE Instance
     * @param maxQP - Maximum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMaxQP = function (maxQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxQP " + maxQP);
    };
    /**
     * Send Enable Filler Data to the UE Instance
     * @param enable - True
     */
    UeDescriptorUi.prototype.sendEncoderEnableFillerData = function (enable) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.EnableFillerData " + Number(enable).valueOf());
    };
    /**
     * Send Encoder MultiPass to UE Instance
     * @param multiPass - MultiPass "DISABLED" | "QUARTER" | "FULL"
     */
    UeDescriptorUi.prototype.sendEncoderMultiPass = function (multiPass) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.Multipass " + multiPass);
    };
    /**
     * Send a Web RTC Degradation Preference to UE Instance
     * @param DegradationPreference - Degradation Preference "BALANCED" | "MAINTAIN_FRAMERATE" | "MAINTAIN_RESOLUTION"
     */
    UeDescriptorUi.prototype.sendWebRtcDegradationPreference = function (DegradationPreference) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.DegradationPreference " + DegradationPreference);
    };
    /**
     * Sends the Max FPS to the UE Instance
     * @param MaxFps - Web RTC Max Frames Per Second
     */
    UeDescriptorUi.prototype.sendWebRtcMaxFps = function (MaxFps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxFps " + MaxFps);
    };
    /**
    * Sends the FPS to the UE Instance used un UE 5.0
    * @param Fps - Web RTC Frames Per Second
    */
    UeDescriptorUi.prototype.sendWebRtcFps = function (Fps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.Fps " + Fps);
    };
    /**
     * Sends the Minimum bit rate to the UE Instance
     * @param MinBitrate - Web RTC Minimum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMinBitrate = function (MinBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MinBitrate " + MinBitrate);
    };
    /**
     * Sends the Maximum bit rate to the UE Instance
     * @param MaxBitrate - Web RTC Maximum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMaxBitrate = function (MaxBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxBitrate " + MaxBitrate);
    };
    /**
     * Sends the Low Quantization Parameter Threshold level to the UE Instance
     * @param LowQpThreshold - Low Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcLowQpThreshold = function (LowQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.LowQpThreshold " + LowQpThreshold);
    };
    /**
     * Sends the High Quantization Parameter Threshold level to the UE Instance
     * @param HighQpThreshold - High Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcHighQpThreshold = function (HighQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.HighQpThreshold " + HighQpThreshold);
    };
    /**
     * Sends a descriptor string to the UE Interaction Instance
     * @param descriptor - the String descriptor to send
     */
    UeDescriptorUi.prototype.sendUiInteraction = function (descriptor) {
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.uiInteraction, descriptor);
    };
    /**
     * Sends a console descriptor
     * @param descriptor - The string descriptor to send
     */
    UeDescriptorUi.prototype.sendUiConsoleInteraction = function (descriptor) {
        var payload = {
            Console: descriptor
        };
        this.sendUiInteraction(JSON.stringify(payload));
    };
    return UeDescriptorUi;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_0__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputGamePadMessage.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputGamePadMessage.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputGamePadMessage": () => (/* binding */ UeInputGamePadMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * The class for handling UE Input GamePad Messages. It implements the UeDataMessage class
 */
var UeInputGamePadMessage = /** @class */ (function (_super) {
    __extends(UeInputGamePadMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputGamePadMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send the controller button press data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex - the button index number
     * @param isRepeat - is this a repeat press
     */
    UeInputGamePadMessage.prototype.sendControllerButtonPressed = function (controllerIndex, buttonIndex, isRepeat) {
        var Data = new DataView(new ArrayBuffer(4));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonPressed);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        Data.setUint8(3, Number(isRepeat).valueOf());
        this.sendData(Data.buffer);
    };
    /**
     * Send the controller button release data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex  - the button index number
     */
    UeInputGamePadMessage.prototype.sendControllerButtonReleased = function (controllerIndex, buttonIndex) {
        var Data = new DataView(new ArrayBuffer(3));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonReleased);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        this.sendData(Data.buffer);
    };
    /**
     * Send controller axis data through the data channel
     * @param controllerIndex - the controller index number
     * @param axisIndex - the axis index number
     * @param analogValue - the analogue value number
     */
    UeInputGamePadMessage.prototype.sendControllerAxisMove = function (controllerIndex, axisIndex, analogValue) {
        var Data = new DataView(new ArrayBuffer(11));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadAnalog);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, axisIndex);
        Data.setFloat64(3, analogValue, true);
        this.sendData(Data.buffer);
    };
    return UeInputGamePadMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts":
/*!*********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputKeyboardMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputKeyboardMessage": () => (/* binding */ UeInputKeyboardMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Keyboard Messages to the UE Instance
 */
var UeInputKeyboardMessage = /** @class */ (function (_super) {
    __extends(UeInputKeyboardMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputKeyboardMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Sends the key down to the UE Instance
     * @param keyCode - Key code
     * @param isRepeat - Is the key repeating
     */
    UeInputKeyboardMessage.prototype.sendKeyDown = function (keyCode, isRepeat) {
        var Payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyDown, keyCode, Number(isRepeat).valueOf()]);
        this.sendData(Payload.buffer);
    };
    /**
     * Sends the Key Up to the UE Instance
     * @param keyCode - Key code
     */
    UeInputKeyboardMessage.prototype.sendKeyUp = function (keyCode) {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyUp, keyCode]);
        this.sendData(payload.buffer);
    };
    /**
     * Sends the key press to the UE Instance
     * @param CharCode - character code of a key pressed
     */
    UeInputKeyboardMessage.prototype.sendKeyPress = function (CharCode) {
        var data = new DataView(new ArrayBuffer(3));
        data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyPress);
        data.setUint16(1, CharCode, true);
        this.sendData(data.buffer);
    };
    return UeInputKeyboardMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputMouseMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputMouseMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputMouseMessage": () => (/* binding */ UeInputMouseMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Mouse Messages to the UE Instance
 */
var UeInputMouseMessage = /** @class */ (function (_super) {
    __extends(UeInputMouseMessage, _super);
    /**
    * @param datachannelController - Data channel Controller
    */
    function UeInputMouseMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send Mouse Enter to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseEnter = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseEnter);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Leave to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseLeave = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseLeave);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Down to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseDown = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseDown);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Up to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseUp = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseUp);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Move to the UE Instance
     * @param mouseCordX - X Mouse Coordinate
     * @param mouseCordY - Y Mouse Coordinate
     * @param deltaX - X Mouse Delta Coordinate
     * @param deltaY - Y Mouse Delta Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseMove = function (mouseCordX, mouseCordY, deltaX, deltaY) {
        var Data = new DataView(new ArrayBuffer(9));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseMove);
        Data.setUint16(1, mouseCordX, true);
        Data.setUint16(3, mouseCordY, true);
        Data.setInt16(5, deltaX, true);
        Data.setInt16(7, deltaY, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse wheel event to the UE Instance
     * @param deltaY - Mouse Wheel delta Y
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseWheel = function (deltaY, X, Y) {
        var Data = new DataView(new ArrayBuffer(7));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseWheel);
        Data.setInt16(1, deltaY, true);
        Data.setUint16(3, X, true);
        Data.setUint16(5, Y, true);
        this.sendData(Data.buffer);
    };
    return UeInputMouseMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputTouchMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputTouchMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeInputTouchMessage": () => (/* binding */ UeInputTouchMessage)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Handles Sending Touch messages to the UE Instance
 */
var UeInputTouchMessage = /** @class */ (function (_super) {
    __extends(UeInputTouchMessage, _super);
    /**
     * @param datachannelController - Data channel Controller
     */
    function UeInputTouchMessage(datachannelController, videoElementProvider) {
        var _this = _super.call(this, datachannelController) || this;
        _this.unsignedOutOfRange = 65535;
        _this.signedOutOfRange = 32767;
        _this.videoElementProvider = videoElementProvider;
        _this.fingersIds = {};
        _this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        _this.printInputs = false;
        return _this;
    }
    /**
     * Handles Touch event Start
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchStart = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchStart, touches);
    };
    /**
     * Handles Touch event End
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchEnd = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchEnd, touches);
    };
    /**
     * Handles Touch event Move
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchMove = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchMove, touches);
    };
    /**
     * Handles Sending the Touch Event to the UE Instance via the Data channel
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouch = function (touchType, touches) {
        var data = new DataView(new ArrayBuffer(2 + 7 * touches.length));
        data.setUint8(0, touchType);
        data.setUint8(1, touches.length);
        var byte = 2;
        for (var t = 0; t < touches.length; t++) {
            var touch = touches[t];
            var x = touch.clientX; //- offsetLeft;
            var y = touch.clientY; //- offsetTop;
            var coord = this.normaliseAndQuantiseUnsigned(x, y);
            //      byte =  2
            data.setUint16(byte, coord.x, true);
            byte += 2;
            //      byte =  4
            data.setUint16(byte, coord.y, true);
            byte += 2;
            //      byte =  6
            data.setUint8(byte, this.fingersIds[touch.identifier]);
            byte += 1;
            //      byte =  7
            data.setUint8(byte, 255 * touch.force); // force is between 0.0 and 1.0 so quantize into byte.
            byte += 1;
            //      byte =  8
            data.setUint8(byte, coord.inRange ? 1 : 0); // mark the touch as in the player or not
            byte += 1;
        }
        this.sendData(data.buffer);
    };
    /**
     * TO DO
     * @param x - X Coordinate
     * @param y - Y Coordinate
     * @returns - Normalised and Quantised Unsigned values
     */
    UeInputTouchMessage.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / rootDiv.clientWidth;
                var normalizedY = ratio * (y / rootDiv.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned. 
                var normalizedX = ratio * (x / rootDiv.clientWidth - 0.5) + 0.5;
                var normalizedY = y / rootDiv.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    return UeInputTouchMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeMessageTypes.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeMessageTypes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UeMessageType": () => (/* binding */ UeMessageType)
/* harmony export */ });
/**
 * The Type of message sent to the UE instance over the data channel
 * Must be kept in sync with PixelStreamingProtocol::EToUE4Msg C++ enum.
 * {@link https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Plugins/Media/PixelStreaming/Source/PixelStreaming/Private/ProtocolDefs.h} Requires Login
 */
var UeMessageType = /** @class */ (function () {
    function UeMessageType() {
    }
    /**********************************************************************/
    /*
     * Control Messages. Range = 0..49.
     */
    UeMessageType.iFrameRequest = 0;
    UeMessageType.requestQualityControl = 1;
    UeMessageType.maxFpsRequest = 2;
    UeMessageType.averageBitrateRequest = 3;
    UeMessageType.startStreaming = 4;
    UeMessageType.stopStreaming = 5;
    UeMessageType.latencyTest = 6;
    UeMessageType.requestInitialSettings = 7;
    /**********************************************************************/
    /*
     * Input Messages. Range = 50..89.
     */
    // Generic Input Messages. Range = 50..59.
    UeMessageType.uiInteraction = 50;
    UeMessageType.command = 51;
    // Keyboard Input Message. Range = 60..69.
    UeMessageType.keyDown = 60;
    UeMessageType.keyUp = 61;
    UeMessageType.keyPress = 62;
    // Mouse Input Messages. Range = 70..79.
    UeMessageType.mouseEnter = 70;
    UeMessageType.mouseLeave = 71;
    UeMessageType.mouseDown = 72;
    UeMessageType.mouseUp = 73;
    UeMessageType.mouseMove = 74;
    UeMessageType.mouseWheel = 75;
    // Touch Input Messages. Range = 80..89.
    UeMessageType.touchStart = 80;
    UeMessageType.touchEnd = 81;
    UeMessageType.touchMove = 82;
    // Gamepad Input Messages. Range = 90..99
    UeMessageType.gamepadButtonPressed = 90;
    UeMessageType.gamepadButtonReleased = 91;
    UeMessageType.gamepadAnalog = 92;
    return UeMessageType;
}());



/***/ }),

/***/ "./src/Ui/UiController.ts":
/*!********************************!*\
  !*** ./src/Ui/UiController.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UiController": () => (/* binding */ UiController),
/* harmony export */   "playerStyleAttributes": () => (/* binding */ playerStyleAttributes)
/* harmony export */ });
/**
 * The Ui Controller class handles all methods that interact with the UI
 */
var UiController = /** @class */ (function () {
    function UiController(videoPlayerProvider) {
        var _this = this;
        this.lastTimeResized = new Date().getTime();
        this.videoPlayerProvider = videoPlayerProvider;
        this.playerStyleAttributes = new playerStyleAttributes();
        // set resize events to the windows if it is resized or its orientation is changed
        window.addEventListener('resize', function () { return _this.resizePlayerStyle(); }, true);
        window.addEventListener('orientationchange', function () { return _this.onOrientationChange(); });
    }
    /**
     * Resizes the player element to fill the window
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToFillWindow = function (playerElement) {
        var videoElement = this.videoPlayerProvider.getVideoElement();
        // Fill the player display in window, keeping picture's aspect ratio.
        var windowAspectRatio = window.innerHeight / window.innerWidth;
        var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
        // We want to keep the video ratio correct for the video stream
        var videoWidth;
        var videoHeight;
        if (!videoElement === undefined) {
            videoWidth = parseInt(videoElement.getAttribute("videoWidth"));
            videoHeight = parseInt(videoElement.getAttribute("videoHeight"));
        }
        var videoAspectRatio = videoHeight / videoWidth;
        if (isNaN(videoAspectRatio)) {
            //Video is not initialised yet so set playerElement to size of window
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
        else if (windowAspectRatio < playerAspectRatio) {
            // Window height is the constraining factor so to keep aspect ratio change width appropriately
            this.playerStyleAttributes.styleWidth = Math.floor(window.innerHeight / videoAspectRatio);
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
        else {
            // Window width is the constraining factor so to keep aspect ratio change height appropriately
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = Math.floor(window.innerWidth * videoAspectRatio);
            this.playerStyleAttributes.styleTop = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
    };
    /**
     * Resizes the player element to fit the actual size of the stream
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToActualSize = function (playerElement) {
        var videoElement = this.videoPlayerProvider.getVideoElement();
        var videoElementLength;
        if (!videoElement === undefined) {
            videoElementLength = parseInt(videoElement.getAttribute("length"));
        }
        if (videoElementLength > 0) {
            // Display image in its actual size
            this.playerStyleAttributes.styleWidth = videoElement.videoWidth;
            this.playerStyleAttributes.styleHeight = videoElement.videoHeight;
            var Top = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            var Left = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            this.playerStyleAttributes.styleTop = (Top > 0) ? Top : 0;
            this.playerStyleAttributes.styleLeft = (Left > 0) ? Left : 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
    };
    /**
     * Resizes the player element to fit an arbitrary size
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToArbitrarySize = function (playerElement) {
        playerElement.setAttribute('style', "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
    };
    /**
     * An override for setting up the mouse and freezeFrame
     * @param element - the player DOM element
     */
    UiController.prototype.setUpMouseAndFreezeFrame = function (element) { };
    /**
     * An override for updating the video stream size
     */
    UiController.prototype.updateVideoStreamSize = function () { };
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    UiController.prototype.resizePlayerStyle = function () {
        var playerElement = this.videoPlayerProvider.getVideoParentElement();
        if (!playerElement) {
            return;
        }
        this.updateVideoStreamSize();
        if (playerElement.classList.contains('fixed-size')) {
            this.setUpMouseAndFreezeFrame(playerElement);
            return;
        }
        // controls for resizing the player 
        var videoWidth = parseInt(playerElement.getAttribute("videoWidth"));
        var videoHeight = parseInt(playerElement.getAttribute("videoHeight"));
        var windowSmallerThanPlayer = window.innerWidth < videoWidth || window.innerHeight < videoHeight;
        if (this.enlargeDisplayToFillWindow !== null) {
            if (this.enlargeDisplayToFillWindow === true || windowSmallerThanPlayer) {
                this.resizePlayerStyleToFillWindow(playerElement);
            }
            else {
                this.resizePlayerStyleToActualSize(playerElement);
            }
        }
        else {
            this.resizePlayerStyleToArbitrarySize(playerElement);
        }
        this.setUpMouseAndFreezeFrame(playerElement);
    };
    /**
     * On the orientation change of a window clear the timeout
     */
    UiController.prototype.onOrientationChange = function () {
        var _this = this;
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = setTimeout(function () { _this.resizePlayerStyle(); }, 500);
    };
    return UiController;
}());

/**
 * Handles the player style attributes so they can be instantiated
 */
var playerStyleAttributes = /** @class */ (function () {
    function playerStyleAttributes() {
        this.styleCursor = 'default';
    }
    return playerStyleAttributes;
}());



/***/ }),

/***/ "./src/VideoPlayer/StreamController.ts":
/*!*********************************************!*\
  !*** ./src/VideoPlayer/StreamController.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StreamController": () => (/* binding */ StreamController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
var StreamController = /** @class */ (function () {
    function StreamController(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.audioElement = document.createElement("Audio");
    }
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    StreamController.prototype.handleOnTrack = function (rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "handleOnTrack " + JSON.stringify(rtcTrackEvent.streams), 6);
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Got track - ' + rtcTrackEvent.track.kind + ' id=' + rtcTrackEvent.track.id + ' readyState=' + rtcTrackEvent.track.readyState, 6);
        }
        if (rtcTrackEvent.track.kind == "audio") {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == "video" && videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            videoElement.srcObject = rtcTrackEvent.streams[0];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Set video source from video track ontrack.');
            return;
        }
    };
    /**
    * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
    * @param audioMediaStream - Audio Media stream track
    */
    StreamController.prototype.CreateAudioTrack = function (audioMediaStream) {
        var videoElement = this.videoElementProvider.getVideoElement();
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (videoElement.srcObject && videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Created new audio element to play separate audio stream.');
        }
    };
    return StreamController;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayer.ts":
/*!****************************************!*\
  !*** ./src/VideoPlayer/VideoPlayer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayer": () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

var VideoPlayer = /** @class */ (function () {
    function VideoPlayer(rootDiv, startVideoMuted) {
        this.videoElement = document.createElement("video");
        this.videoElement.id = "streamingVideo";
        this.videoElement.muted = startVideoMuted;
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = "100%";
        this.videoElement.style.height = "100%";
        this.videoElement.style.position = "absolute";
        rootDiv.appendChild(this.videoElement);
    }
    /**
     * Get the current context of the html video element
     * @returns the current context of the video element
     */
    VideoPlayer.prototype.getVideoElement = function () {
        return this.videoElement;
    };
    /**
     * Get the current context of the html video elements parent
     * @returns the current context of the video elements parent
     */
    VideoPlayer.prototype.getVideoParentElement = function () {
        return this.videoElement.parentElement;
    };
    /**
     * Set the click actions for when the Element is mouse clicked
     * @param event - Mouse Event
     */
    VideoPlayer.prototype.setClickActions = function (event) {
        if (this.videoElement.paused) {
            this.videoElement.play();
        }
        // minor hack to alleviate ios not supporting pointerlock
        if (this.videoElement.requestPointerLock) {
            this.videoElement.requestPointerLock();
        }
    };
    /**
    * Set the mouse enter and mouse leave events
    */
    VideoPlayer.prototype.setMouseEnterAndLeaveEvents = function (mouseEnterCallBack, mouseLeaveCallBack) {
        // Handle when the Mouse has entered the element
        this.videoElement.onmouseenter = function (event) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Mouse Entered", 6);
            mouseEnterCallBack();
        };
        // Handles when the mouse has left the element 
        this.videoElement.onmouseleave = function (event) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Mouse Left", 6);
            mouseLeaveCallBack();
        };
    };
    /**
    * Set the Video Elements src object tracks to enable
    * @param enabled - Enable Tracks on the Src Object
    */
    VideoPlayer.prototype.setVideoEnabled = function (enabled) {
        // this is a temporary hack until type scripts video element is updated to reflect the need for tracks on a html video element 
        var videoElement = this.videoElement;
        videoElement.srcObject.getTracks().forEach(function (track) { return track.enabled = enabled; });
    };
    return VideoPlayer;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts":
/*!********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseHoverEvents": () => (/* binding */ VideoPlayerMouseHoverEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player mouse Hover handler
 */
var VideoPlayerMouseHoverEvents = /** @class */ (function () {
    /**
     * @param mouseController - Mouse Controller
     */
    function VideoPlayerMouseHoverEvents(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Satisfies the interfaces handleLockStateChange requirement
     */
    VideoPlayerMouseHoverEvents.prototype.handleLockStateChange = function () { };
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseMove = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "MouseMove", 6);
        this.mouseController.sendMouseMove(mouseEvent.offsetX, mouseEvent.offsetY, mouseEvent.movementX, mouseEvent.movementY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseDown = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "onMouse Down", 6);
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.detail * -120, wheelEvent.offsetX, wheelEvent.offsetY);
        wheelEvent.preventDefault();
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleContextMenu = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    return VideoPlayerMouseHoverEvents;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts":
/*!*********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayerMouseLockedEvents": () => (/* binding */ VideoPlayerMouseLockedEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Handle the mouse locked events
 */
var VideoPlayerMouseLockedEvents = /** @class */ (function () {
    /**
     * @param videoElementProvider - The HTML Video Element provider
     * @param mouseController  - Mouse Controller
     */
    function VideoPlayerMouseLockedEvents(videoElementProvider, mouseController) {
        this.videoElementProvider = videoElementProvider;
        this.mouseController = mouseController;
        var videoElement = this.videoElementProvider.getVideoElement();
        this.x = videoElement.width / 2;
        this.y = videoElement.height / 2;
    }
    /**
     * Handle when the locked state Changed
     */
    VideoPlayerMouseLockedEvents.prototype.handleLockStateChange = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Lock state has changed", 6);
        var videoElement = this.videoElementProvider.getVideoElement();
        if (document.pointerLockElement === videoElement) {
            document.onmousemove = function (mouseEvent) { return _this.handleMouseMove(mouseEvent); };
            document.onwheel = function (wheelEvent) { return _this.handleMouseWheel(wheelEvent); };
            videoElement.onmousedown = function (wheelEvent) { return _this.handleMouseDown(wheelEvent); };
            videoElement.onmouseup = function (mouseEvent) { return _this.handleMouseUp(mouseEvent); };
        }
        else {
            document.onmousemove = null;
            videoElement.onmousedown = null;
            videoElement.onmouseup = null;
            videoElement.onwheel = null;
        }
    };
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseMove = function (mouseEvent) {
        var videoElement = this.videoElementProvider.getVideoElement();
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > videoElement.clientWidth) {
            this.x -= videoElement.clientWidth;
        }
        if (this.y > videoElement.clientHeight) {
            this.y -= videoElement.clientHeight;
        }
        if (this.x < 0) {
            this.x = videoElement.clientWidth + this.x;
        }
        if (this.y < 0) {
            this.y = videoElement.clientHeight - this.y;
        }
        this.mouseController.sendMouseMove(this.x, this.y, mouseEvent.movementX, mouseEvent.movementY);
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseDown = function (mouseEvent) {
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.deltaY, wheelEvent.x, wheelEvent.y);
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleContextMenu = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "onContextMenu");
    };
    return VideoPlayerMouseLockedEvents;
}());



/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "webRtcPlayerController": () => (/* binding */ webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../VideoPlayer/StreamController */ "./src/VideoPlayer/StreamController.ts");
/* harmony import */ var _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Ui/UiController */ "./src/Ui/UiController.ts");
/* harmony import */ var _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../FreezeFrame/FreezeFrameController */ "./src/FreezeFrame/FreezeFrameController.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../UeInstanceMessage/UeDescriptorUi */ "./src/UeInstanceMessage/UeDescriptorUi.ts");
/* harmony import */ var _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../UeInstanceMessage/UeControlMessage */ "./src/UeInstanceMessage/UeControlMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Inputs_InputController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Inputs/InputController */ "./src/Inputs/InputController.ts");
/* harmony import */ var _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../MicPlayer/MicController */ "./src/MicPlayer/MicController.ts");
/* harmony import */ var _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayer */ "./src/VideoPlayer/VideoPlayer.ts");













/**
 * Entry point for the Web RTC Player
 */
var webRtcPlayerController = /** @class */ (function () {
    /**
     *
     * @param config - the frontend config object
     * @param delegate - the delegate interface object
     */
    function webRtcPlayerController(config, delegate) {
        var _this = this;
        this.shouldShowPlayOverlay = true;
        this.lastTimeResized = new Date().getTime();
        this.config = config;
        this.delegate = delegate;
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server 
        this.afkLogic = new _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_4__.AfkLogic(this.config.controlScheme, this.config.afkTimeout);
        this.afkLogic.setDisconnectMessageOverride = function (message) { return _this.setDisconnectMessageOverride(message); };
        this.afkLogic.closeWebSocket = function () { return _this.closeSignalingServer(); };
        this.freezeFrameController = new _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__.FreezeFrameController(this.config.playerElement);
        this.videoPlayer = new _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_12__.VideoPlayer(this.config.playerElement, this.config.startVideoMuted);
        this.streamController = new _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_1__.StreamController(this.videoPlayer);
        this.uiController = new _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__.UiController(this.videoPlayer);
        this.uiController.setUpMouseAndFreezeFrame = function (element) { return _this.setUpMouseAndFreezeFrame(element); };
        this.dataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_5__.DataChannelController();
        this.dataChannelController.handleOnOpen = function () { return _this.handleDataChannelConnected(); };
        this.dataChannelController.onLatencyTestResult = function (latencyTestResults) { return _this.handleLatencyTestResult(latencyTestResults); };
        this.dataChannelController.onVideoEncoderAvgQP = function (AvgQP) { return _this.handleVideoEncoderAvgQP(AvgQP); };
        this.dataChannelController.OnInitialSettings = function (InitialSettings) { return _this.handleInitialSettings(InitialSettings); };
        this.dataChannelController.onQualityControlOwnership = function (hasQualityOwnership) { return _this.handleQualityControlOwnership(hasQualityOwnership); };
        this.dataChannelController.resetAfkWarningTimerOnDataSend = function () { return _this.afkLogic.resetAfkWarningTimer(); };
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__.WebSocketController(this.config.signallingServerAddress);
        this.webSocketController.onConfig = function (messageConfig) { return _this.handleOnConfigMessage(messageConfig); };
        this.webSocketController.onInstanceStateChange = function (instanceState) { return _this.handleInstanceStateChange(instanceState); };
        this.webSocketController.onAuthenticationResponse = function (authResponse) { return _this.handleAuthenticationResponse(authResponse); };
        this.webSocketController.onWebSocketOncloseOverlayMessage = function (event) { return _this.delegate.onDisconnect(event.code + " - " + event.reason); };
        // set up the final webRtc player controller methods from within our delegate so a connection can be activated
        this.delegate.setIWebRtcPlayerController(this);
        // now that the delegate has finished instantiating connect the rest of the afk methods to the afk logic class
        this.afkLogic.showAfkOverlay = function () { return _this.delegate.showAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.updateAfkCountdown = function () { return _this.delegate.updateAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.hideCurrentOverlay = function () { return _this.delegate.hideCurrentOverlay(); };
        this.webSocketController.stopAfkWarningTimer = function () { return _this.afkLogic.stopAfkWarningTimer(); };
    }
    /**
     * connect up the onAfkClick action with a method so it can be exposed to the delegate
     */
    webRtcPlayerController.prototype.onAfkClick = function () {
        this.afkLogic.onAfkClick();
        // if the stream is paused play it
        if (this.videoPlayer.videoElement.paused === true) {
            this.playStream();
        }
    };
    /**
     * Restart the stream automaticity without refreshing the page
     */
    webRtcPlayerController.prototype.restartStreamAutomaticity = function () {
        var _this = this;
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "The Web Socket Controller does not exist so this will not work right now.");
            return;
        }
        // if a websocket object has not been created connect normally without closing 
        if (!this.webSocketController.webSocket) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "A websocket connection has not been made yet so we will start the stream");
            this.delegate.onWebRtcAutoConnect();
            this.connectToSignallingServer();
        }
        else {
            // set the replay status so we get a text overlay over an action overlay
            this.delegate.showActionOrErrorOnDisconnect = false;
            // set the disconnect message
            this.setDisconnectMessageOverride("Restarting stream manually");
            // close the connection 
            this.closeSignalingServer();
            // wait for the connection to close and restart the connection
            var autoConnectTimeout_1 = setTimeout(function () {
                _this.delegate.onWebRtcAutoConnect();
                _this.connectToSignallingServer();
                clearTimeout(autoConnectTimeout_1);
            }, 3000);
        }
    };
    /**
     * Sets if we are enlarging the display to fill the window for freeze frames and ui controller
     * @param isFilling is the display filling or not
     */
    webRtcPlayerController.prototype.setEnlargeToFillDisplay = function (isFilling) {
        this.freezeFrameController.freezeFrame.enlargeDisplayToFillWindow = isFilling;
        this.uiController.enlargeDisplayToFillWindow = isFilling;
    };
    /**
     * Loads a freeze frame if it is required otherwise shows the play overlay
     */
    webRtcPlayerController.prototype.loadFreezeFrameOrShowPlayOverlay = function () {
        if (this.shouldShowPlayOverlay === true) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "showing play overlay");
            this.delegate.showPlayOverlay();
            this.resizePlayerStyle();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "showing freeze frame");
            this.freezeFrameController.showFreezeFrame();
        }
        this.videoPlayer.setVideoEnabled(false);
    };
    /**
     * Enable the video after hiding a freeze frame
     */
    webRtcPlayerController.prototype.InvalidateFreezeFrameAndEnableVideo = function () {
        this.freezeFrameController.hideFreezeFrame();
        if (this.videoPlayer.videoElement) {
            this.videoPlayer.setVideoEnabled(true);
        }
    };
    /**
     * Plays the stream audio and video source and sets up other pieces while the stream starts
     */
    webRtcPlayerController.prototype.playStream = function () {
        var _this = this;
        if (!this.videoPlayer.videoElement) {
            this.delegate.showErrorOverlay("Could not player video stream because the video player was not initialised correctly.");
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Could not player video stream because the video player was not initialised correctly.");
            // set the disconnect message
            this.setDisconnectMessageOverride("Stream not initialised correctly");
            // close the connection 
            this.closeSignalingServer();
        }
        else {
            this.inputController.registerTouch(this.config.fakeMouseWithTouches, this.videoPlayer.videoElement);
            if (this.streamController.audioElement) {
                this.streamController.audioElement.play().then(function () {
                    _this.playVideo();
                }).catch(function (onRejectedReason) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), onRejectedReason);
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
                    _this.delegate.showPlayOverlay();
                });
            }
            else {
                this.playVideo();
            }
            this.shouldShowPlayOverlay = false;
            this.freezeFrameController.showFreezeFrame();
            this.delegate.hideCurrentOverlay();
        }
    };
    /**
     * Plays the video stream
     */
    webRtcPlayerController.prototype.playVideo = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'playVide');
        // // handle play() with .then as it is an asynchronous call  
        this.videoPlayer.videoElement.play().catch(function (onRejectedReason) {
            if (_this.streamController.audioElement.srcObject) {
                _this.streamController.audioElement.pause();
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), onRejectedReason);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
            _this.delegate.showPlayOverlay();
        });
    };
    /**
     * Enable the video to play automaticity if enableSpsAutoplay is true
     */
    webRtcPlayerController.prototype.autoPlayVideoOrSetUpPlayOverlay = function () {
        if (this.config.enableSpsAutoplay === true) {
            // set up the auto play on the video element  
            this.videoPlayer.videoElement.autoplay = true;
            // attempt to play the video
            this.playStream();
        }
        else {
            this.delegate.showPlayOverlay();
        }
        // send and request initial stats
        this.ueControlMessage.SendRequestInitialSettings();
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Connect to the Signaling server
     */
    webRtcPlayerController.prototype.connectToSignallingServer = function () {
        this.webSocketController.connect();
    };
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    webRtcPlayerController.prototype.startSession = function (peerConfig) {
        var _this = this;
        // set up url params for STUN, Mic and SFU
        this.urlParams = new URLSearchParams(window.location.search);
        // check for forcing turn
        if (this.urlParams.has('ForceTURN')) {
            // check for a turn server
            var hasTurnServer = this.checkTurnServerAvailability(peerConfig);
            // close and error if turn is forced and there is no turn server
            if (!hasTurnServer) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "No turn server was found in the Peer Connection Options. TURN cannot be forced, closing connection. Please use STUN instead");
                this.setDisconnectMessageOverride("TURN cannot be forced, closing connection. Please use STUN instead.");
                this.closeSignalingServer();
                return;
            }
        }
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_6__.PeerConnectionController(peerConfig, this.urlParams.has('ForceTURN'));
        //set up mic controller
        this.micController = new _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_11__.MicController(this.urlParams);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = function (event) { return _this.handleVideoStats(event); };
        /* When the Peer Connection Wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = function (offer) { return _this.handleSendWebRTCOffer(offer); };
        /* When the Peer connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = function (peerConnectionIceEvent) { return _this.handleSendIceCandidate(peerConnectionIceEvent); };
        // handel mic connections with promise
        this.dataChannelController.createDataChannel(this.peerConnectionController.peerConnection, "cirrus", this.datachannelOptions);
        // set up webRtc text overlays 
        this.peerConnectionController.showTextOverlayConnecting = function () { return _this.delegate.onWebRtcConnecting(); };
        this.peerConnectionController.showTextOverlaySetupFailure = function () { return _this.delegate.onWebRtcFailed(); };
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = function (trackEvent) { return _this.streamController.handleOnTrack(trackEvent); };
        /* Start the Hand shake process by creating an Offer */
        this.peerConnectionController.createOffer(this.sdpConstraints, this.micController.useMic);
    };
    /**
     * Checks the peer connection options for a turn server and returns true or false
     */
    webRtcPlayerController.prototype.checkTurnServerAvailability = function (options) {
        // if iceServers is empty return false this should not be the general use case but is here incase
        if (!options.iceServers) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'A turn server was not found');
            return false;
        }
        // loop through the ice servers to check for a turn url
        for (var _i = 0, _a = options.iceServers; _i < _a.length; _i++) {
            var iceServer = _a[_i];
            for (var _b = 0, _c = iceServer.urls; _b < _c.length; _b++) {
                var url = _c[_b];
                if (url.includes('turn')) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "A turn server was found at " + url);
                    return true;
                }
            }
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'A turn server was not found');
        return false;
    };
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    webRtcPlayerController.prototype.handleOnConfigMessage = function (messageConfig) {
        var _this = this;
        // Tell the WebRtcController to start a session with the peer options sent from the signaling server
        this.startSession(messageConfig.peerConnectionOptions);
        // When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onWebRtcAnswer = function (messageAnswer) { return _this.handleWebRtcAnswer(messageAnswer); };
        // When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onIceCandidate = function (iceCandidate) { return _this.handleIceCandidate(iceCandidate); };
    };
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer Message from the Signaling server
     */
    webRtcPlayerController.prototype.handleWebRtcAnswer = function (Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "There is an answer", 6);
        var sdpAnswer = {
            sdp: Answer.sdp,
            type: "answer"
        };
        this.peerConnectionController.handleAnswer(sdpAnswer);
        // start the afk warning timer as the container is now running
        this.afkLogic.startAfkWarningTimer();
        // show the overlay that we have an answer
        this.delegate.onWebRtcAnswer();
    };
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    webRtcPlayerController.prototype.handleIceCandidate = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Web RTC Controller: onWebRtcIce", 6);
        var candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    };
    /**
     * Send the ice Candidate to the signaling server via websocket
       * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    webRtcPlayerController.prototype.handleSendIceCandidate = function (iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "OnIceCandidate", 6);
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    };
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    webRtcPlayerController.prototype.handleSendWebRTCOffer = function (offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Sending the offer to the Server", 6);
        this.webSocketController.sendWebRtcOffer(offer);
    };
    /**
     * registers the mouse for use in IWebRtcPlayerController
     */
    webRtcPlayerController.prototype.activateRegisterMouse = function () {
        this.inputController.registerMouse(this.config.controlScheme);
    };
    /**
     * Sets up the Data channel Keyboard, Mouse, UE Control Message, UE Descriptor
     */
    webRtcPlayerController.prototype.handleDataChannelConnected = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Data Channel is open", 6);
        // show the connected overlay 
        this.delegate.onWebRtcConnected();
        this.inputController = new _Inputs_InputController__WEBPACK_IMPORTED_MODULE_10__.InputController(this.dataChannelController, this.videoPlayer);
        this.ueControlMessage = new _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_8__.UeControlMessage(this.dataChannelController);
        this.ueDescriptorUi = new _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_7__.UeDescriptorUi(this.dataChannelController);
        this.activateRegisterMouse();
        this.inputController.registerKeyBoard(this.config.suppressBrowserKeys);
        this.inputController.registerGamePad();
        this.videoPlayer.setMouseEnterAndLeaveEvents(function () { return _this.inputController.mouseController.sendMouseEnter(); }, function () { return _this.inputController.mouseController.sendMouseLeave(); });
        this.resizePlayerStyle();
        this.dataChannelController.processFreezeFrameMessage = function (view) { return _this.freezeFrameController.processFreezeFrameMessage(view, function () { return _this.loadFreezeFrameOrShowPlayOverlay(); }); };
        this.dataChannelController.onUnFreezeFrame = function () { return _this.InvalidateFreezeFrameAndEnableVideo(); };
        setInterval(function () { return _this.getStats(); }, 1000);
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.resizePlayerStyle();
        this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayer.videoElement.clientWidth, this.videoPlayer.videoElement.clientHeight);
        this.delegate.onVideoInitialised();
        this.uiController.updateVideoStreamSize = function () { return _this.updateVideoStreamSize(); };
    };
    /**
     * Handles when the web socket receives an authentication response
     * @param authResponse - Authentication Response
     */
    webRtcPlayerController.prototype.handleAuthenticationResponse = function (authResponse) {
        this.delegate.onAuthenticationResponse(authResponse);
    };
    /**
     * Handles when the stream size changes
     */
    webRtcPlayerController.prototype.updateVideoStreamSize = function () {
        // Call the setter before calling this function
        if (!this.matchViewportResolution) {
            return;
        }
        var now = new Date().getTime();
        if (now - this.lastTimeResized > 1000) {
            // get the root div from config 
            if (!this.config.playerElement) {
                return;
            }
            this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayer.videoElement.clientWidth, this.videoPlayer.videoElement.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'Resizing too often - skipping', 6);
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(this.updateVideoStreamSize, 1000);
        }
    };
    /**
     * Handles when the Instance State Changes
     * @param instanceState  - Instance State
     */
    webRtcPlayerController.prototype.handleInstanceStateChange = function (instanceState) {
        this.delegate.onInstanceStateChange(instanceState);
    };
    /**
     * Set the freeze frame overlay to the player div
     * @param playerElement - The div element of the Player
     */
    webRtcPlayerController.prototype.setUpMouseAndFreezeFrame = function (playerElement) {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.playerElementClientRect = playerElement.getBoundingClientRect();
        this.freezeFrameController.freezeFrame.resize();
    };
    /**
     * Close the Connection to the signaling server
     */
    webRtcPlayerController.prototype.closeSignalingServer = function () {
        this.webSocketController.close();
    };
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    webRtcPlayerController.prototype.getStats = function () {
        this.peerConnectionController.generateStats();
    };
    /**
     * Send a Latency Test Request to the UE Instance
     */
    webRtcPlayerController.prototype.sendLatencyTest = function () {
        this.latencyStartTime = Date.now();
        this.ueControlMessage.sendLatencyTest(this.latencyStartTime);
    };
    /**
     * Send the Encoder Settings to the UE Instance as a UE UI Descriptor.
     * @param encoder - Encoder Settings
     */
    webRtcPlayerController.prototype.sendEncoderSettings = function (encoder) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Encoder Settings    ----\n" + JSON.stringify(encoder, undefined, 4) + "\n-------------------------------", 6);
        if (encoder.RateControl != null) {
            this.ueDescriptorUi.sendEncoderRateControl(encoder.RateControl);
        }
        if (encoder.TargetBitrate != null) {
            this.ueDescriptorUi.sendEncoderTargetBitRate(encoder.TargetBitrate);
        }
        if (encoder.MaxBitrate != null) {
            this.ueDescriptorUi.sendEncoderMaxBitrateVbr(encoder.MaxBitrate);
        }
        if (encoder.MinQP != null) {
            this.ueDescriptorUi.sendEncoderMinQP(encoder.MinQP);
        }
        if (encoder.MaxQP != null) {
            this.ueDescriptorUi.sendEncoderMaxQP(encoder.MaxQP);
        }
        if (encoder.FillerData != null) {
            this.ueDescriptorUi.sendEncoderEnableFillerData(encoder.FillerData);
        }
        if (encoder.MultiPass != null) {
            this.ueDescriptorUi.sendEncoderMultiPass(encoder.MultiPass);
        }
    };
    /**
     * Send the WebRTC Settings to the UE Instance as a UE UI Descriptor.
     * @param webRTC - Web RTC Settings
     */
    webRtcPlayerController.prototype.sendWebRtcSettings = function (webRTC) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   WebRTC Settings    ----\n" + JSON.stringify(webRTC, undefined, 4) + "\n-------------------------------", 6);
        if (webRTC.DegradationPref != null) {
            this.ueDescriptorUi.sendWebRtcDegradationPreference(webRTC.DegradationPref);
        }
        if (webRTC.FPS != null) {
            this.ueDescriptorUi.sendWebRtcFps(webRTC.FPS);
            this.ueDescriptorUi.sendWebRtcMaxFps(webRTC.FPS);
        }
        if (webRTC.MinBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMinBitrate(webRTC.MinBitrate);
        }
        if (webRTC.MaxBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMaxBitrate(webRTC.MaxBitrate);
        }
        if (webRTC.LowQP != null) {
            this.ueDescriptorUi.sendWebRtcLowQpThreshold(webRTC.LowQP);
        }
        if (webRTC.HighQP != null) {
            this.ueDescriptorUi.sendWebRtcHighQpThreshold(webRTC.HighQP);
        }
    };
    /**
     * Send Aggregated Stats to the Signaling Server
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.sendStatsToSignallingServer = function (stats) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending Aggregated Stats to Signaling Server   ----\n" + JSON.stringify(stats, undefined, 4) + "\n-----------------------------------------------------------", 6);
        this.webSocketController.sendStats(stats);
    };
    /**
     * Sends a UI Interaction Descriptor to the UE Instance
     * @param message - String to send to the UE Instance
     */
    webRtcPlayerController.prototype.sendUeUiDescriptor = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   UE UI Interaction String   ----\n" + JSON.stringify(message, undefined, 4) + "\n---------------------------------------", 6);
        this.ueDescriptorUi.sendUiInteraction(message);
    };
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    webRtcPlayerController.prototype.sendShowFps = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending show stat to UE   ----", 6);
        this.ueDescriptorUi.sendShowFps();
    };
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    webRtcPlayerController.prototype.sendRequestQualityControlOwnership = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending Request to Control Quality  ----", 6);
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param latencyTimings - Latency Test Timings
     */
    webRtcPlayerController.prototype.handleLatencyTestResult = function (latencyTimings) {
        latencyTimings.testStartTimeMs = this.latencyStartTime;
        latencyTimings.browserReceiptTimeMs = Date.now();
        latencyTimings.latencyExcludingDecode = ~~(latencyTimings.browserReceiptTimeMs - latencyTimings.testStartTimeMs);
        latencyTimings.testDuration = ~~(latencyTimings.TransmissionTimeMs - latencyTimings.ReceiptTimeMs);
        latencyTimings.networkLatency = ~~(latencyTimings.latencyExcludingDecode - latencyTimings.testDuration);
        if (latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs) {
            latencyTimings.endToEndLatency = ~~(latencyTimings.frameDisplayDeltaTimeMs + latencyTimings.networkLatency, +latencyTimings.CaptureToSendMs);
        }
        this.delegate.onLatencyTestResult(latencyTimings);
    };
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param settings - Initial Encoder and Web RTC Settings
     */
    webRtcPlayerController.prototype.handleInitialSettings = function (settings) {
        this.delegate.onInitialSettings(settings);
    };
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param AvgQP - Encoders Quantization Parameter
     */
    webRtcPlayerController.prototype.handleVideoEncoderAvgQP = function (AvgQP) {
        this.delegate.onVideoEncoderAvgQP(AvgQP);
    };
    /**
     * Flag set if the user has Quality Ownership
     * @param hasQualityOwnership - Does the current client have Quality Ownership
     */
    webRtcPlayerController.prototype.handleQualityControlOwnership = function (hasQualityOwnership) {
        this.delegate.onQualityControlOwnership(hasQualityOwnership);
    };
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.handleVideoStats = function (stats) {
        this.delegate.onVideoStats(stats);
    };
    /**
    * To Resize the Video Player element
    */
    webRtcPlayerController.prototype.resizePlayerStyle = function () {
        this.uiController.resizePlayerStyle();
    };
    /**
     * Get the overridden disconnect message
     */
    webRtcPlayerController.prototype.getDisconnectMessageOverride = function () {
        return this.disconnectMessageOverride;
    };
    /**
     * Set the override for the disconnect message
     */
    webRtcPlayerController.prototype.setDisconnectMessageOverride = function (message) {
        this.disconnectMessageOverride = message;
    };
    return webRtcPlayerController;
}());



/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InstanceState": () => (/* binding */ InstanceState),
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageAuthResponse": () => (/* binding */ MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* binding */ MessageAuthResponseOutcomeType),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageInstanceState": () => (/* binding */ MessageInstanceState),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["AUTHENTICATION_REQUIRED"] = "authenticationRequired";
    MessageRecvTypes["AUTHENTICATION_RESPONSE"] = "authenticationResponse";
    MessageRecvTypes["INSTANCE_STATE"] = "instanceState";
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageRecvTypes["PING"] = "ping";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Types of Authentication reposes
 */
var MessageAuthResponseOutcomeType;
(function (MessageAuthResponseOutcomeType) {
    MessageAuthResponseOutcomeType["REDIRECT"] = "REDIRECT";
    MessageAuthResponseOutcomeType["INVALID_TOKEN"] = "INVALID_TOKEN";
    MessageAuthResponseOutcomeType["AUTHENTICATED"] = "AUTHENTICATED";
    MessageAuthResponseOutcomeType["ERROR"] = "ERROR";
})(MessageAuthResponseOutcomeType || (MessageAuthResponseOutcomeType = {}));
/**
 * States of the UE Instance
 */
var InstanceState;
(function (InstanceState) {
    InstanceState["UNALLOCATED"] = "UNALLOCATED";
    InstanceState["PENDING"] = "PENDING";
    InstanceState["FAILED"] = "FAILED";
    InstanceState["READY"] = "READY";
})(InstanceState || (InstanceState = {}));
/**
 * Concrete Received Message wrapper
 */
var MessageRecv = /** @class */ (function () {
    function MessageRecv() {
    }
    return MessageRecv;
}());

/**
 * Authentication Required Message wrapper
 */
var MessageAuthRequired = /** @class */ (function (_super) {
    __extends(MessageAuthRequired, _super);
    function MessageAuthRequired() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthRequired;
}(MessageRecv));

/**
 * Authentication Response Message wrapper
 */
var MessageAuthResponse = /** @class */ (function (_super) {
    __extends(MessageAuthResponse, _super);
    function MessageAuthResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthResponse;
}(MessageRecv));

/**
 * Instance State Message wrapper
 */
var MessageInstanceState = /** @class */ (function (_super) {
    __extends(MessageInstanceState, _super);
    function MessageInstanceState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageInstanceState;
}(MessageRecv));

/**
 * Config Message Wrapper
 */
var MessageConfig = /** @class */ (function (_super) {
    __extends(MessageConfig, _super);
    function MessageConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageConfig;
}(MessageRecv));

/**
 * Player Count Message wrapper
 */
var MessagePlayerCount = /** @class */ (function (_super) {
    __extends(MessagePlayerCount, _super);
    function MessagePlayerCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessagePlayerCount;
}(MessageRecv));

/**
 * Web RTC offer Answer Message wrapper
 */
var MessageAnswer = /** @class */ (function (_super) {
    __extends(MessageAnswer, _super);
    function MessageAnswer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAnswer;
}(MessageRecv));

/**
 * Ice Candidate Message wrapper
 */
var MessageIceCandidate = /** @class */ (function (_super) {
    __extends(MessageIceCandidate, _super);
    function MessageIceCandidate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageIceCandidate;
}(MessageRecv));



/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MessageAuthRequest": () => (/* binding */ MessageAuthRequest),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessagePong": () => (/* binding */ MessagePong),
/* harmony export */   "MessageRequestInstance": () => (/* binding */ MessageRequestInstance),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageStats": () => (/* binding */ MessageStats),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["STATS"] = "stats";
    MessageSendTypes["AUTHENTICATION_REQUEST"] = "authenticationRequest";
    MessageSendTypes["REQUEST_INSTANCE"] = "requestInstance";
    MessageSendTypes["OFFER"] = "offer";
    MessageSendTypes["PONG"] = "pong";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
var MessageSend = /** @class */ (function () {
    function MessageSend() {
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageSend.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending => \n" + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    };
    return MessageSend;
}());

/**
 * Auth Request Message Wrapper
 */
var MessageAuthRequest = /** @class */ (function (_super) {
    __extends(MessageAuthRequest, _super);
    /**
     * @param token - Token Provided by the Auth Provider
     * @param provider - Name of the provider that is registered in the auth plugin
     */
    function MessageAuthRequest(token, provider) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.AUTHENTICATION_REQUEST;
        _this.token = token;
        _this.provider = provider;
        return _this;
    }
    return MessageAuthRequest;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessagePong = /** @class */ (function (_super) {
    __extends(MessagePong, _super);
    function MessagePong(time) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.PONG;
        _this.time = time;
        return _this;
    }
    return MessagePong;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessageRequestInstance = /** @class */ (function (_super) {
    __extends(MessageRequestInstance, _super);
    function MessageRequestInstance() {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.REQUEST_INSTANCE;
        return _this;
    }
    return MessageRequestInstance;
}(MessageSend));

/**
 * Aggregated Stats Message Wrapper
 */
var MessageStats = /** @class */ (function (_super) {
    __extends(MessageStats, _super);
    /**
     * @param aggregatedStats - Aggregated Stats
     */
    function MessageStats(aggregatedStats) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.STATS;
        _this.inboundVideoStats = aggregatedStats.inboundVideoStats;
        _this.inboundAudioStats = aggregatedStats.inboundAudioStats;
        _this.candidatePair = aggregatedStats.candidatePair;
        _this.dataChannelStats = aggregatedStats.dataChannelStats;
        _this.localCandidates = aggregatedStats.localCandidates;
        _this.remoteCandidates = aggregatedStats.remoteCandidates;
        _this.outboundVideoStats = aggregatedStats.outBoundVideoStats;
        return _this;
    }
    return MessageStats;
}(MessageSend));

/**
 *  Web RTC Offer message wrapper
 */
var MessageWebRTCOffer = /** @class */ (function (_super) {
    __extends(MessageWebRTCOffer, _super);
    /**
     * @param offer - Generated Web RTC Offer
     */
    function MessageWebRTCOffer(offer) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.OFFER;
        if (offer) {
            _this.type = offer.type;
            _this.sdp = offer.sdp;
        }
        return _this;
    }
    return MessageWebRTCOffer;
}(MessageSend));

/**
 * RTC Ice Candidate Wrapper
 */
var MessageIceCandidate = /** @class */ (function () {
    /**
     * @param candidate - RTC Ice Candidate
     */
    function MessageIceCandidate(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageIceCandidate.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending => \n" + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    };
    return MessageIceCandidate;
}());



/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");



/**
 * The controller for the WebSocket and all associated methods
 */
var WebSocketController = /** @class */ (function () {
    /**
     * @param Address - The Address of the signaling server
     */
    function WebSocketController(Address) {
        this.WS_OPEN_STATE = 1;
        this.address = Address;
    }
    /**
     * Connect to the signaling server
     * @returns - If there is a connection
     */
    WebSocketController.prototype.connect = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), this.address, 6);
        try {
            this.webSocket = new WebSocket(this.address);
            this.webSocket.onopen = function (event) { return _this.handleOnOpen(event); };
            this.webSocket.onerror = function (event) { return _this.handleOnError(event); };
            this.webSocket.onclose = function (event) { return _this.handleOnClose(event); };
            this.webSocket.onmessage = function (event) { return _this.handleOnMessage(event); };
            this.webSocket.onmessagebinary = function (event) { return _this.handelOnMessageBinary(event); };
            return true;
        }
        catch (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(error, error);
            return false;
        }
    };
    /**
     * Handles what happens when a message is received in binary form
     * @param event - Message Received
     */
    WebSocketController.prototype.handelOnMessageBinary = function (event) {
        var _this = this;
        // if the event is empty return
        if (!event || !event.data) {
            return;
        }
        // handel the binary and then handel the message
        event.data.text().then(function (messageString) {
            // build a new message
            var constructedMessage = new MessageEvent('messageFromBinary', {
                data: messageString
            });
            // send the new stringified event back into `onmessage`
            _this.handelOnMessageBinary(constructedMessage);
        }).catch(function (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Failed to parse binary blob from websocket, reason: " + error);
        });
    };
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    WebSocketController.prototype.handleOnMessage = function (event) {
        // Check if websocket message is binary, if so, stringify it.
        if (event.data && event.data instanceof Blob) {
            this.handelOnMessageBinary(event);
            return;
        }
        var message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received => \n" + JSON.stringify(JSON.parse(event.data), undefined, 4), 6);
        switch (message.type) {
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING: {
                // send our pong payload back to the signalling server
                var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessagePong(new Date().getTime()).payload();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING + ": " + payload, 6);
                this.webSocket.send(payload);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_REQUIRED: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "AUTHENTICATION_REQUIRED", 6);
                var authenticationRequired = JSON.parse(event.data);
                var url_string = window.location.href;
                var url = new URL(url_string);
                var authRequest = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageAuthRequest(url.searchParams.get("code"), url.searchParams.get("provider"));
                this.webSocket.send(authRequest.payload());
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_RESPONSE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "AUTHENTICATION_RESPONSE", 6);
                var authenticationResponse = JSON.parse(event.data);
                this.onAuthenticationResponse(authenticationResponse);
                switch (authenticationResponse.outcome) {
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.REDIRECT: {
                        window.location.href = authenticationResponse.redirect;
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.AUTHENTICATED: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "User is authenticated and now requesting an instance", 6);
                        this.webSocket.send(new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageRequestInstance().payload());
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.INVALID_TOKEN: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Authentication error : Invalid Token");
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.ERROR: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Authentication Error from server Check what you are sending");
                        break;
                    }
                    default: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "The Outcome Message has not been handled : this is really bad");
                        break;
                    }
                }
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.INSTANCE_STATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "INSTANCE_STATE", 6);
                var instanceState = JSON.parse(event.data);
                this.onInstanceStateChange(instanceState);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "CONFIG", 6);
                var config = JSON.parse(event.data);
                this.onConfig(config);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "PLAYER_COUNT", 6);
                var playerCount = JSON.parse(event.data);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Player Count: " + (playerCount.count - 1), 6);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "ANSWER", 6);
                var answer = JSON.parse(event.data);
                this.onWebRtcAnswer(answer);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "ICE_CANDIDATE", 6);
                var iceCandidate = JSON.parse(event.data);
                this.onIceCandidate(iceCandidate.candidate);
                break;
            }
            default: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Error Message type not Defined");
                break;
            }
        }
    };
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    WebSocketController.prototype.handleOnOpen = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Connected to the signalling server via WebSocket", 6);
    };
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    WebSocketController.prototype.handleOnError = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'WebSocket error: ');
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), event.toString());
    };
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    WebSocketController.prototype.handleOnClose = function (event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Disconnected to the signalling server via WebSocket: " + JSON.stringify(event.code) + " - " + event.reason);
        this.stopAfkWarningTimer();
    };
    /**
     * An override for stopping the afk warning timer
     */
    WebSocketController.prototype.stopAfkWarningTimer = function () { };
    WebSocketController.prototype.sendWebRtcOffer = function (offer) {
        var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    };
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    WebSocketController.prototype.sendIceCandidate = function (candidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending Ice Candidate");
        if (this.webSocket && this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            var IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    };
    /**
     * Closes the Websocket connection
     */
    WebSocketController.prototype.close = function () {
        this.webSocket.close();
    };
    /**
     * Sends the Aggregated Stats to the signaling server
     * @param stats - Stats Payload
     */
    WebSocketController.prototype.sendStats = function (stats) {
        var data = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageStats(stats);
        this.webSocket.send(data.payload());
    };
    /** Event used for Displaying websocket closed messages */
    WebSocketController.prototype.onWebSocketOncloseOverlayMessage = function (event) { };
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    WebSocketController.prototype.onConfig = function (messageConfig) { };
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    WebSocketController.prototype.onIceCandidate = function (iceCandidate) { };
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    WebSocketController.prototype.onWebRtcAnswer = function (messageAnswer) { };
    /**
     * Event fired with the websocket receives a instance state
     * @param instanceState - UE Instance State
     */
    WebSocketController.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Event fired with the websocket receives a Authentication Response
     * @param authResponse - Authentication Response
     */
    WebSocketController.prototype.onAuthenticationResponse = function (authResponse) { };
    return WebSocketController;
}());

/* 524f4d4d */ 


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__.AfkLogic),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_6__.AggregatedStats),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.ControlSchemeType),
/* harmony export */   "DelegateBase": () => (/* reexport safe */ _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__.DelegateBase),
/* harmony export */   "Encoder": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.Encoder),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.InitialSettings),
/* harmony export */   "InstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.InstanceState),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_4__.LatencyTestResults),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger),
/* harmony export */   "MessageAuthResponse": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageAuthResponse),
/* harmony export */   "MessageAuthResponseOutcomeType": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageAuthResponseOutcomeType),
/* harmony export */   "MessageInstanceState": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageInstanceState),
/* harmony export */   "WebRTC": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.WebRTC),
/* harmony export */   "version": () => (/* binding */ version),
/* harmony export */   "webRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Delegate/DelegateBase */ "./src/Delegate/DelegateBase.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");









var version = "0.1.4";

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,